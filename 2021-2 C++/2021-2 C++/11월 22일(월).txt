━━━━━━━━━━━━━━━━━━━━
저장시간: 2021-11-22 오후 5:38:17 월요일
━━━━━━━━━━━━━━━━━━━━
main.cpp
//━━━━━━━━━━━━━━━━━━━━━━━━
// 11월 22일 월요일 (12주 2일)
// 
// 1. 객체간의 관계 : 상속(inheritance)
//	1. 코드를 재사용한다.(STRING)
//	2. 다형성을 구현한다.
// 
// 함수의 정체(멤버 함수 포함)
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>

#include "save.h"
#include "Dog.h"

// [문제] 

int main()
{
	Dog a{ "코코" };

	a.Move();	// 코코 움직인다.

	Save(std::vector<std::string>{ "main.cpp" }, "11월 22일(월).txt");
}━━━━━━━━━━━━━━━━━━━━
저장시간: 2021-11-22 오후 5:38:49 월요일
━━━━━━━━━━━━━━━━━━━━
Animal.h
#ifndef _ANIMAL
#define _ANIMAL

class Animal
{
public:
	Animal() = default;
	Animal(std::string name) : name(name) {}
public:
	void Move();

private:
	std::string name;
};

#endif // ! _ANIMAL

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Animal.cpp
#include <iostream>
#include <string>

#include "Animal.h"

void Animal::Move()
{
	std::cout << name << " 움직인다" << std::endl;
}


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Dog.h
#ifndef _DOG
#define _DOG

#include "Animal.h"

class Dog : public Animal
{
public:
	Dog() = default;
	Dog(std::string name) : Animal(name) {}
};

#endif // !_DOG

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Dog.cpp
#include <iostream>
#include <string>

#include "Dog.h"


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

━━━━━━━━━━━━━━━━━━━━
저장시간: 2021-11-22 오후 5:46:25 월요일
━━━━━━━━━━━━━━━━━━━━
main.cpp
//━━━━━━━━━━━━━━━━━━━━━━━━
// 11월 22일 월요일 (12주 2일)
// 
// 1. 객체간의 관계 : 상속(inheritance)
//	1. 코드를 재사용한다.(STRING)
//	2. 다형성을 구현한다.
// 
// 함수의 정체(멤버 함수 포함)
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>

#include "save.h"
#include "Dog.h"

// [문제] 

int main()
{
	Dog a{ "코코" };

	a.Move();	// 코코 움직인다.

	Save(std::vector<std::string>{ "main.cpp", "Animal.h", "Animal.cpp", "Dog.h", "Dog.cpp" }, "11월 22일(월).txt");
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Animal.h
#ifndef _ANIMAL
#define _ANIMAL

class Animal
{
public:
	Animal() = default;
	Animal(std::string name) : name(name) {}
public:
	void Move();

protected:
	std::string name;
};

#endif // ! _ANIMAL

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Animal.cpp
#include <iostream>
#include <string>

#include "Animal.h"

void Animal::Move()
{
	std::cout << name << " 움직인다" << std::endl;
}


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Dog.h
#ifndef _DOG
#define _DOG

#include "Animal.h"

class Dog : public Animal
{
public:
	Dog() = default;
	Dog(std::string name) : Animal(name) {}
public:
	void Move();	// 멤버 함수는 override 가능
};

#endif // !_DOG

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Dog.cpp
#include <iostream>
#include <string>

#include "Dog.h"

void Dog::Move()
{
	std::cout << name << " 달린다" << std::endl;
}


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

━━━━━━━━━━━━━━━━━━━━
저장시간: 2021-11-22 오후 6:13:49 월요일
━━━━━━━━━━━━━━━━━━━━
main.cpp
//━━━━━━━━━━━━━━━━━━━━━━━━
// 11월 22일 월요일 (12주 2일)
// 
// 1. 객체간의 관계 : 상속(inheritance)
//	1. 코드를 재사용한다.(STRING)
//	2. 다형성을 구현한다.
// 
// 함수의 정체(멤버 함수 포함)
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>

#include "save.h"
#include "Dog.h"

// [문제] 

int main()
{
	Dog a{ "코코" };
	Dog b{ "보리" };

	// 모든 멤버 함수는 this 포인터가 첫 번째 인자로 무조건 들어간다.
	a.Move();		// move(&a);
	b.Move();		// move(&b);

	Save(std::vector<std::string>{ "main.cpp", "Animal.h", "Animal.cpp", "Dog.h", "Dog.cpp" }, "11월 22일(월).txt");
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Animal.h
#ifndef _ANIMAL
#define _ANIMAL

class Animal
{
public:
	Animal() = default;
	Animal(std::string name) : name(name) {}
public:
	void Move();

protected:
	std::string name;
};

#endif // ! _ANIMAL

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Animal.cpp
#include <iostream>
#include <string>

#include "Animal.h"

void Animal::Move()
{
	std::cout << name << " 움직인다" << std::endl;
}


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Dog.h
#ifndef _DOG
#define _DOG

#include "Animal.h"

class Dog : public Animal
{
public:
	Dog() = default;
	Dog(std::string name) : Animal(name) {}
public:
	void Move();	// 멤버 함수는 override 가능
};

#endif // !_DOG

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Dog.cpp
#include <iostream>
#include <string>

#include "Dog.h"

void Dog::Move()
{
	std::cout << this->name << " 달린다" << std::endl;
}


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

━━━━━━━━━━━━━━━━━━━━
저장시간: 2021-11-22 오후 6:28:34 월요일
━━━━━━━━━━━━━━━━━━━━
main.cpp
//━━━━━━━━━━━━━━━━━━━━━━━━
// 11월 22일 월요일 (12주 2일)
// 
// 1. 객체간의 관계 : 상속(inheritance)
//	1. 코드를 재사용한다.(STRING)
//	2. 다형성을 구현한다.
// 
// 함수의 정체(멤버 함수 포함)
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>

#include "save.h"
#include "Dog.h"

// [문제] 

int main()
{
	Dog a;
	Bird b;

	a.Move();
	b.Move();

	Save(std::vector<std::string>{ "main.cpp", "Animal.h", "Animal.cpp" }, "11월 22일(월).txt");
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Animal.h
#ifndef _ANIMAL
#define _ANIMAL

class Animal
{
public:
	Animal() = default;
	Animal(std::string name) : name(name) {}
public:
	void Move();

protected:
	std::string name;
};

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

class Dog : public Animal
{
public:
	void Move();
};

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

class Bird : public Animal
{
public:
	void Move();
};

#endif // ! _ANIMAL

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Animal.cpp
#include <iostream>
#include <string>

#include "Animal.h"

void Animal::Move()
{
	std::cout << name << " 움직인다" << std::endl;
}

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

void Dog::Move()
{
	std::cout << name << " 달린다" << std::endl;
}

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

void Bird::Move()
{
	std::cout << name << " 난다" << std::endl;
}


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

━━━━━━━━━━━━━━━━━━━━
저장시간: 2021-11-22 오후 6:53:16 월요일
━━━━━━━━━━━━━━━━━━━━
main.cpp
//━━━━━━━━━━━━━━━━━━━━━━━━
// 11월 22일 월요일 (12주 2일)
// 
// 1. 객체간의 관계 : 상속(inheritance)
//	1. 코드를 재사용한다.(STRING)
//	2. 다형성을 구현한다.
// 
// 함수의 정체(멤버 함수 포함)
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>

#include "save.h"
#include "Dog.h"

// [문제] 

int main()
{
	Dog a{ "코코" };
	Bird b{ "삐약" };

	Animal x = a;
	x.Move();

	Save(std::vector<std::string>{ "main.cpp", "Animal.h", "Animal.cpp" }, "11월 22일(월).txt");
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Animal.h
#ifndef _ANIMAL
#define _ANIMAL

class Animal
{
public:
	Animal() = default;
	Animal(std::string name) : name(name) {}
public:
	void Move();

protected:
	std::string name;
};

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

class Dog : public Animal
{
public:
	Dog() = default;
	Dog(std::string name) : Animal(name) {}
public:
	void Move();
};

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

class Bird : public Animal
{
public:
	Bird() = default;
	Bird(std::string name) : Animal(name) {}
public:
	void Move();
};

#endif // ! _ANIMAL

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Animal.cpp
#include <iostream>
#include <string>

#include "Animal.h"

void Animal::Move()
{
	std::cout << name << " 움직인다" << std::endl;
}

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

void Dog::Move()
{
	std::cout << name << " 달린다" << std::endl;
}

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

void Bird::Move()
{
	std::cout << name << " 난다" << std::endl;
}


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

━━━━━━━━━━━━━━━━━━━━
저장시간: 2021-11-22 오후 7:04:13 월요일
━━━━━━━━━━━━━━━━━━━━
main.cpp
//━━━━━━━━━━━━━━━━━━━━━━━━
// 11월 22일 월요일 (12주 2일)
// 
// 1. 객체간의 관계 : 상속(inheritance)
//	1. 코드를 재사용한다.(STRING)
//	2. 다형성을 구현한다.
// 
// 함수의 정체(멤버 함수 포함)
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>

#include "save.h"
#include "Dog.h"

// [문제] 

int main()
{
	Dog a{ "코코" };
	Bird b{ "삐약" };

	Animal* animals[2];

	animals[0] = (Animal*)(Dog*)&a;
	animals[1] = &b;

	for (int i = 0; i < 2; ++i)
	{
		animals[i]->Move();
	}

	Save(std::vector<std::string>{ "main.cpp", "Animal.h", "Animal.cpp" }, "11월 22일(월).txt");
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Animal.h
#ifndef _ANIMAL
#define _ANIMAL

class Animal
{
public:
	Animal() = default;
	Animal(std::string name) : name(name) {}
public:
	virtual void Move();

protected:
	std::string name;
};

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

class Dog : public Animal
{
public:
	Dog() = default;
	Dog(std::string name) : Animal(name) {}
public:
	void Move();
};

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

class Bird : public Animal
{
public:
	Bird() = default;
	Bird(std::string name) : Animal(name) {}
public:
	void Move();
};

#endif // ! _ANIMAL

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Animal.cpp
#include <iostream>
#include <string>

#include "Animal.h"

void Animal::Move()
{
	std::cout << name << " 움직인다" << std::endl;
}

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

void Dog::Move()
{
	std::cout << name << " 달린다" << std::endl;
}

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

void Bird::Move()
{
	std::cout << name << " 난다" << std::endl;
}


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━


━━━━━━━━━━━━━━━━━━━━
저장시간: 11/10/21 18:07:32 Wednesday
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━
// 11월 10일 수요일 (11주 1일)
// 
// 1. 지난 시간 복습
// 2. class Dog를 파일에 저장하고 파일에서 읽어오기
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include <vector>
#include <random>

#include "save.h"
#include "Dog.h"

// [문제] 문제없이 실행되도록 코딩하라

int main()
{
	Dog a{ "코코" };
	Dog b{ "보리", 2 };

	std::cout << a << std::endl;
	std::cout << b << std::endl;

	Save(std::vector<std::string>{"main.cpp", "Dog.h", "Dog.cpp"}, "11월 10일(목).txt");
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#ifndef _DOG
#define _DOG

class Dog
{
public:
	Dog() = default;
	Dog(std::string name);
	Dog(std::string name, int age);
public:
	friend std::ostream& operator<<(std::ostream& os, const Dog& dog);

private:
	std::string name;
	int age;
};

#endif // !_DOG

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>

#include "Dog.h"

Dog::Dog(std::string name) : name(name), age(0)
{
}

Dog::Dog(std::string name, int age) : name(name), age(age)
{

}

std::ostream& operator<<(std::ostream& os, const Dog& dog)
{
	os << "나는 " << dog.name << ", " << dog.age << "살입니다.";

	return os;
}


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

━━━━━━━━━━━━━━━━━━━━
저장시간: 11/10/21 18:28:18 Wednesday
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━
// 11월 10일 수요일 (11주 1일)
// 
// 1. 지난 시간 복습
// 2. class Dog를 파일에 저장하고 파일에서 읽어오기
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include <vector>
#include <random>

#include "save.h"
#include "Dog.h"

// [문제] Dog a와 b의 정보를 파일 "개 두마리.txt"에 기록하라
// 기록되는 내용은 지금 cout과 같이 되게하라

int main()
{
	Dog a{ "코코" };
	Dog b{ "보리", 2 };

	std::ofstream out("개 두마리.txt");

	out << a << std::endl;
	out << b << std::endl;

	std::cout << a << std::endl;
	std::cout << b << std::endl;

	Save(std::vector<std::string>{"main.cpp", "Dog.h", "Dog.cpp"}, "11월 10일(수).txt");
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#ifndef _DOG
#define _DOG

class Dog
{
public:
	Dog() = default;
	Dog(std::string name);
	Dog(std::string name, int age);
public:
	friend std::ostream& operator<<(std::ostream& os, const Dog& dog);

private:
	std::string name;
	int age;
};

#endif // !_DOG

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>

#include "Dog.h"

Dog::Dog(std::string name) : name(name), age(0)
{
}

Dog::Dog(std::string name, int age) : name(name), age(age)
{

}

std::ostream& operator<<(std::ostream& os, const Dog& dog)
{
	os << "나는 " << dog.name << ", " << dog.age << "살입니다.";

	return os;
}


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

━━━━━━━━━━━━━━━━━━━━
저장시간: 11/10/21 18:43:06 Wednesday
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━
// 11월 10일 수요일 (11주 1일)
// 
// 1. 지난 시간 복습
// 2. class Dog를 파일에 저장하고 파일에서 읽어오기
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include <fstream>
#include <vector>
#include <random>

#include "save.h"
#include "Dog.h"

// [문제] "개 두마리.txt"에는 Dog 2 객체의 정보가 기록되어 있다.
// 파일을 읽어서 정보를 출력하라.

int main()
{
	Dog a;
	Dog b;

	std::ifstream in("개 두마리.txt");

	in >> a >> b;

	std::cout << a << std::endl;
	std::cout << b << std::endl;

	Save(std::vector<std::string>{"main.cpp", "Dog.h", "Dog.cpp"}, "11월 10일(수).txt");
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#ifndef _DOG
#define _DOG

class Dog
{
public:
	Dog() = default;
	Dog(std::string name);
	Dog(std::string name, int age);
public:
	friend std::ostream& operator<<(std::ostream& os, const Dog& dog);
	friend std::istream& operator>>(std::istream& is, Dog& dog);

private:
	std::string name;
	int age;
};

#endif // !_DOG

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>

#include "Dog.h"

Dog::Dog(std::string name) : name(name), age(0)
{
}

Dog::Dog(std::string name, int age) : name(name), age(age)
{

}

std::ostream& operator<<(std::ostream& os, const Dog& dog)
{
	os << dog.name << " " << dog.age;

	return os;
}

std::istream& operator>>(std::istream& is, Dog& dog)
{
	is >> dog.name >> dog.age;

	return is;
}


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

━━━━━━━━━━━━━━━━━━━━
저장시간: 11/15/21 17:56:22 Monday
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━
// 11월 15일 월요일 (11주 2일)
// 
// 1. 지난 시간 복습
// 2. class Dog를 파일에 저장하고 파일에서 읽어오기
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include <fstream>
#include <vector>
#include <random>

#include "save.h"
#include "Dog.h"

// [문제] Dog 10000 객체를 생성하여 파일 "개 1만 마리.txt"에 기록한다.
// name은 랜덤한 알파벳 소문자만 사용하고 10글자로 고정한다.
// age는 [1, 10000] 사이의 랜덤한 값으로 만들자.
// 파일에서 1만 마리 정보를 읽어 필요한 내용을 코딩해 본다.

std::random_device rd;
std::default_random_engine dre(rd());
std::uniform_int_distribution<int> ucd('a', 'z');
std::uniform_int_distribution<int> uid(1, 10000);

int main()
{
	std::ofstream out("개 1만 마리.txt");

	Dog dog;

	for (int i = 0; i < 10000; ++i)
	{
		for (int j = 0; j < 10; ++j)
		{
			dog.SetName(j, ucd(dre));
		}

		dog.SetAge(uid(dre));

		out << dog << std::endl;
		std::cout << dog << std::endl;
	}

	Save(std::vector<std::string>{"main.cpp", "Dog.h", "Dog.cpp"}, "11월 15일(월).txt");
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#ifndef _DOG
#define _DOG

class Dog
{
public:
	Dog() { name.resize(10); }
	Dog(std::string name);
	Dog(std::string name, int age);
public:
	void SetName(int i, int alph) { name[i] = alph; }
	void SetAge(int age) { this->age = age; }
public:
	friend std::ostream& operator<<(std::ostream& os, const Dog& dog);
	friend std::istream& operator>>(std::istream& is, Dog& dog);

private:
	std::string name;
	int age;
};

#endif // !_DOG

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>

#include "Dog.h"

Dog::Dog(std::string name) : name(name), age(0)
{
}

Dog::Dog(std::string name, int age) : name(name), age(age)
{

}

std::ostream& operator<<(std::ostream& os, const Dog& dog)
{
	os << dog.name << " " << dog.age;

	return os;
}

std::istream& operator>>(std::istream& is, Dog& dog)
{
	is >> dog.name >> dog.age;

	return is;
}


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

━━━━━━━━━━━━━━━━━━━━
저장시간: 11/15/21 18:10:08 Monday
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━
// 11월 15일 월요일 (11주 2일)
// 
// 1. 지난 시간 복습
// 2. class Dog를 파일에 저장하고 파일에서 읽어오기
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include <fstream>
#include <vector>
#include <random>

#include "save.h"
#include "Dog.h"

// [문제] 파일 "개 1만마리.txt"에 Dog 객체 1만개가 기록되어 있다.
// 1. 정보를 읽어 화면에 출력하라
// 2. 이름 오름차순으로 정렬한 후 첫 원소를 출력
// 3. 나이 오름차순으로 정렬한 후 첫 원소를 출력

std::random_device rd;
std::default_random_engine dre(rd());
std::uniform_int_distribution<int> ucd('a', 'z');
std::uniform_int_distribution<int> uid(1, 10000);

int main()
{
	std::ifstream in("개 1만 마리.txt");

	Dog d;
	std::vector<Dog> dogs;

	while (in >> d)
	{
		dogs.push_back(d);
		std::cout << d << std::endl;
	}

	std::cout << std::endl;

	std::sort(dogs.begin(), dogs.end(), [](const Dog& a, const Dog& b)
		{
			return a.GetName() < b.GetName();
		});

	std::cout << "이름 정렬 : " << dogs.front() << std::endl;

	std::sort(dogs.begin(), dogs.end(), [](const Dog& a, const Dog& b)
		{
			return a.GetAge() < b.GetAge();
		});

	std::cout << "나이 정렬 : " << dogs.front() << std::endl;

	Save(std::vector<std::string>{"main.cpp", "Dog.h", "Dog.cpp"}, "11월 15일(월).txt");
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#ifndef _DOG
#define _DOG

class Dog
{
public:
	Dog() { name.resize(10); }
	Dog(std::string name);
	Dog(std::string name, int age);
public:
	void SetName(int i, int alph) { name[i] = alph; }
	void SetAge(int age) { this->age = age; }

	std::string GetName() const { return name; }
	int GetAge() const { return age; }
public:
	friend std::ostream& operator<<(std::ostream& os, const Dog& dog);
	friend std::istream& operator>>(std::istream& is, Dog& dog);

private:
	std::string name;
	int age;
};

#endif // !_DOG

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>

#include "Dog.h"

Dog::Dog(std::string name) : name(name), age(0)
{
}

Dog::Dog(std::string name, int age) : name(name), age(age)
{

}

std::ostream& operator<<(std::ostream& os, const Dog& dog)
{
	os << dog.name << " " << dog.age;

	return os;
}

std::istream& operator>>(std::istream& is, Dog& dog)
{
	is >> dog.name >> dog.age;

	return is;
}


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

━━━━━━━━━━━━━━━━━━━━
저장시간: 11/15/21 18:16:55 Monday
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━
// 11월 15일 월요일 (11주 2일)
// 
// 1. 지난 시간 복습
// 2. class Dog를 파일에 저장하고 파일에서 읽어오기
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include <fstream>
#include <vector>
#include <random>

#include "save.h"
#include "Dog.h"

// [문제] 파일 "개 1만마리.txt"에 Dog 객체 1만개가 기록되어 있다.
// 1. 정보를 읽어 화면에 출력하라
// 2. 이름 오름차순으로 정렬한 후 첫 원소를 출력
// 3. 나이 오름차순으로 정렬한 후 첫 원소를 출력

std::random_device rd;
std::default_random_engine dre(rd());
std::uniform_int_distribution<int> ucd('a', 'z');
std::uniform_int_distribution<int> uid(1, 10000);

int main()
{
	std::ifstream in("개 1만 마리.txt");

	Dog d;
	Dog* dogs{ new Dog[10000] };

	for (int i = 0; i < 10000; ++i)
	{
		in >> d;
		dogs[i] = d;

		std::cout << d << std::endl;
	}

	std::cout << std::endl;

	std::sort(std::begin(dogs), std::end(dogs), [](const Dog& a, const Dog& b)
		{
			return a.GetName() < b.GetName();
		});

	std::cout << "이름 정렬 : " << *dogs << std::endl;

	std::sort(std::begin(dogs), std::end(dogs), [](const Dog& a, const Dog& b)
		{
			return a.GetAge() < b.GetAge();
		});

	std::cout << "나이 정렬 : " << *dogs << std::endl;

	Save(std::vector<std::string>{"main.cpp", "Dog.h", "Dog.cpp"}, "11월 15일(월).txt");
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#ifndef _DOG
#define _DOG

class Dog
{
public:
	Dog() { name.resize(10); }
	Dog(std::string name);
	Dog(std::string name, int age);
public:
	void SetName(int i, int alph) { name[i] = alph; }
	void SetAge(int age) { this->age = age; }

	std::string GetName() const { return name; }
	int GetAge() const { return age; }
public:
	friend std::ostream& operator<<(std::ostream& os, const Dog& dog);
	friend std::istream& operator>>(std::istream& is, Dog& dog);

private:
	std::string name;
	int age;
};

#endif // !_DOG

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>

#include "Dog.h"

Dog::Dog(std::string name) : name(name), age(0)
{
}

Dog::Dog(std::string name, int age) : name(name), age(age)
{

}

std::ostream& operator<<(std::ostream& os, const Dog& dog)
{
	os << dog.name << " " << dog.age;

	return os;
}

std::istream& operator>>(std::istream& is, Dog& dog)
{
	is >> dog.name >> dog.age;

	return is;
}


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

━━━━━━━━━━━━━━━━━━━━
저장시간: 11/15/21 18:42:11 Monday
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━
// 11월 15일 월요일 (11주 2일)
// 
// 1. 지난 시간 복습
// 2. class Dog를 파일에 저장하고 파일에서 읽어오기
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include <fstream>
#include <vector>
#include <random>

#include "save.h"
#include "Dog.h"

// [문제] 파일 "개 1만마리.txt"에 Dog 객체 1만개가 기록되어 있다.
// 1. 정보를 읽어 화면에 출력하라
// 2. 이름 오름차순으로 정렬한 후 첫 원소를 출력
// 3. 나이 오름차순으로 정렬한 후 첫 원소를 출력

std::random_device rd;
std::default_random_engine dre(rd());
std::uniform_int_distribution<int> ucd('a', 'z');
std::uniform_int_distribution<int> uid(1, 10000);

int main()
{
	std::ifstream in("개 1만 마리.txt");

	Dog d;
	Dog* dogs{ new Dog[10000] };
	int i{};

	while (in >> d)
	{
		dogs[i++] = d;

		std::cout << d << std::endl;
	}

	std::cout << std::endl;

	std::sort(dogs, dogs + 10000, [](const Dog& a, const Dog& b)
		{
			return a.GetName() < b.GetName();
		});

	std::cout << "이름 정렬 : " << *dogs << std::endl;

	std::sort(dogs, dogs + 10000, [](const Dog& a, const Dog& b)
		{
			return a.GetAge() < b.GetAge();
		});

	std::cout << "나이 정렬 : " << *dogs << std::endl;

	delete[] dogs;

	Save(std::vector<std::string>{"main.cpp", "Dog.h", "Dog.cpp"}, "11월 15일(월).txt");
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#ifndef _DOG
#define _DOG

class Dog
{
public:
	Dog() { name.resize(10); }
	Dog(std::string name);
	Dog(std::string name, int age);
public:
	void SetName(int i, int alph) { name[i] = alph; }
	void SetAge(int age) { this->age = age; }

	std::string GetName() const { return name; }
	int GetAge() const { return age; }
public:
	friend std::ostream& operator<<(std::ostream& os, const Dog& dog);
	friend std::istream& operator>>(std::istream& is, Dog& dog);

private:
	std::string name;
	int age;
};

#endif // !_DOG

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>

#include "Dog.h"

Dog::Dog(std::string name) : name(name), age(0)
{
}

Dog::Dog(std::string name, int age) : name(name), age(age)
{

}

std::ostream& operator<<(std::ostream& os, const Dog& dog)
{
	os << dog.name << " " << dog.age;

	return os;
}

std::istream& operator>>(std::istream& is, Dog& dog)
{
	is >> dog.name >> dog.age;

	return is;
}


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

━━━━━━━━━━━━━━━━━━━━
저장시간: 11/17/21 18:20:36 Wednesday
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━
// 11월 17일 수요일 (12주 1일)
// 
// 1. 객체간의 관계 : 상속(inheritance)
//	1. 코드를 재사용한다.(STRING)
//	2. 다형성을 구현한다.
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include <fstream>
#include <random>

#include "save.h"
#include "Dog.h"

// [문제] 문자열을 다루는 클래스가 필요하다.(string)
// 모든 문자가 대문자이어야 한다.

class STRING : public std::string
{
public:
	STRING(std::string s) : std::string(s)
	{
		for (int i = 0; i < length(); ++i)
		{
			at(i) = std::toupper(at(i));
		}
	}
// 수정 필요
//public:
//	STRING& operator+=(std::string s)
//	{
//		for (int i = 0; i < length(); ++i)
//		{
//			push_back(std::toupper(s[i]));
//		}
//
//		return *this;
//	}
};

int main()
{
	STRING a{ "c++ programming" };
	a += " language";

	std::cout << a << std::endl;	// C++ PROGRAMMING LANGUAGE

	Save(std::vector<std::string>{"main.cpp"}, "11월 17일(수).txt");
}━━━━━━━━━━━━━━━━━━━━
저장시간: 11/17/21 18:46:13 Wednesday
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━
// 11월 17일 수요일 (12주 1일)
// 
// 1. 객체간의 관계 : 상속(inheritance)
//	1. 코드를 재사용한다.(STRING)
//	2. 다형성을 구현한다.
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>

#include "save.h"
#include "Dog.h"

// [문제] 부모 자식 객체의 생성자 호출을 확인하라.

class Parent
{
public:
	Parent() { std::cout << "부모 생성자 호출" << std::endl; }

private:
	char a;
};

class Child : public Parent
{
public:
	Child() { std::cout << "자식 생성자 호출" << std::endl; }

private:
	int b;
};

int main()
{
	Child a;

	Save(std::vector<std::string>{"main.cpp"}, "11월 17일(수).txt");
}━━━━━━━━━━━━━━━━━━━━
저장시간: 11/17/21 18:53:24 Wednesday
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━
// 11월 17일 수요일 (12주 1일)
// 
// 1. 객체간의 관계 : 상속(inheritance)
//	1. 코드를 재사용한다.(STRING)
//	2. 다형성을 구현한다.
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>

#include "save.h"
#include "Dog.h"

// [문제] 부모 자식 객체의 생성자 호출을 확인하라.

class Parent
{
public:
	Parent() { std::cout << "부모 생성자 호출" << std::endl; }
	~Parent() { std::cout << "부모 소멸자 호출" << std::endl; }

private:
	char a;
};

class Child : public Parent
{
public:
	Child() { std::cout << "자식 생성자 호출" << std::endl; }
	~Child() { std::cout << "자식 소멸자 호출" << std::endl; }

private:
	int b;
};

int main()
{
	Child a;

	Save(std::vector<std::string>{"main.cpp"}, "11월 17일(수).txt");
}━━━━━━━━━━━━━━━━━━━━
저장시간: 11/22/21 17:38:17 Monday
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━
// 11월 22일 월요일 (12주 2일)
// 
// 1. 객체간의 관계 : 상속(inheritance)
//	1. 코드를 재사용한다.(STRING)
//	2. 다형성을 구현한다.
// 
// 함수의 정체(멤버 함수 포함)
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>

#include "save.h"
#include "Dog.h"

// [문제] 

int main()
{
	Dog a{ "코코" };

	a.Move();	// 코코 움직인다.

	Save(std::vector<std::string>{ "main.cpp" }, "11월 22일(월).txt");
}━━━━━━━━━━━━━━━━━━━━
저장시간: 11/22/21 17:38:49 Monday
━━━━━━━━━━━━━━━━━━━━
#ifndef _ANIMAL
#define _ANIMAL

class Animal
{
public:
	Animal() = default;
	Animal(std::string name) : name(name) {}
public:
	void Move();

private:
	std::string name;
};

#endif // ! _ANIMAL

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include <string>

#include "Animal.h"

void Animal::Move()
{
	std::cout << name << " 움직인다" << std::endl;
}


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#ifndef _DOG
#define _DOG

#include "Animal.h"

class Dog : public Animal
{
public:
	Dog() = default;
	Dog(std::string name) : Animal(name) {}
};

#endif // !_DOG

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include <string>

#include "Dog.h"


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

━━━━━━━━━━━━━━━━━━━━
저장시간: 11/22/21 17:46:25 Monday
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━
// 11월 22일 월요일 (12주 2일)
// 
// 1. 객체간의 관계 : 상속(inheritance)
//	1. 코드를 재사용한다.(STRING)
//	2. 다형성을 구현한다.
// 
// 함수의 정체(멤버 함수 포함)
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>

#include "save.h"
#include "Dog.h"

// [문제] 

int main()
{
	Dog a{ "코코" };

	a.Move();	// 코코 움직인다.

	Save(std::vector<std::string>{ "main.cpp", "Animal.h", "Animal.cpp", "Dog.h", "Dog.cpp" }, "11월 22일(월).txt");
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#ifndef _ANIMAL
#define _ANIMAL

class Animal
{
public:
	Animal() = default;
	Animal(std::string name) : name(name) {}
public:
	void Move();

protected:
	std::string name;
};

#endif // ! _ANIMAL

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include <string>

#include "Animal.h"

void Animal::Move()
{
	std::cout << name << " 움직인다" << std::endl;
}


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#ifndef _DOG
#define _DOG

#include "Animal.h"

class Dog : public Animal
{
public:
	Dog() = default;
	Dog(std::string name) : Animal(name) {}
public:
	void Move();	// 멤버 함수는 override 가능
};

#endif // !_DOG

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include <string>

#include "Dog.h"

void Dog::Move()
{
	std::cout << name << " 달린다" << std::endl;
}


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

━━━━━━━━━━━━━━━━━━━━
저장시간: 11/22/21 18:13:49 Monday
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━
// 11월 22일 월요일 (12주 2일)
// 
// 1. 객체간의 관계 : 상속(inheritance)
//	1. 코드를 재사용한다.(STRING)
//	2. 다형성을 구현한다.
// 
// 함수의 정체(멤버 함수 포함)
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>

#include "save.h"
#include "Dog.h"

// [문제] 

int main()
{
	Dog a{ "코코" };
	Dog b{ "보리" };

	// 모든 멤버 함수는 this 포인터가 첫 번째 인자로 무조건 들어간다.
	a.Move();		// move(&a);
	b.Move();		// move(&b);

	Save(std::vector<std::string>{ "main.cpp", "Animal.h", "Animal.cpp", "Dog.h", "Dog.cpp" }, "11월 22일(월).txt");
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#ifndef _ANIMAL
#define _ANIMAL

class Animal
{
public:
	Animal() = default;
	Animal(std::string name) : name(name) {}
public:
	void Move();

protected:
	std::string name;
};

#endif // ! _ANIMAL

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include <string>

#include "Animal.h"

void Animal::Move()
{
	std::cout << name << " 움직인다" << std::endl;
}


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#ifndef _DOG
#define _DOG

#include "Animal.h"

class Dog : public Animal
{
public:
	Dog() = default;
	Dog(std::string name) : Animal(name) {}
public:
	void Move();	// 멤버 함수는 override 가능
};

#endif // !_DOG

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include <string>

#include "Dog.h"

void Dog::Move()
{
	std::cout << this->name << " 달린다" << std::endl;
}


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

━━━━━━━━━━━━━━━━━━━━
저장시간: 11/22/21 18:28:34 Monday
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━
// 11월 22일 월요일 (12주 2일)
// 
// 1. 객체간의 관계 : 상속(inheritance)
//	1. 코드를 재사용한다.(STRING)
//	2. 다형성을 구현한다.
// 
// 함수의 정체(멤버 함수 포함)
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>

#include "save.h"
#include "Dog.h"

// [문제] 

int main()
{
	Dog a;
	Bird b;

	a.Move();
	b.Move();

	Save(std::vector<std::string>{ "main.cpp", "Animal.h", "Animal.cpp" }, "11월 22일(월).txt");
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#ifndef _ANIMAL
#define _ANIMAL

class Animal
{
public:
	Animal() = default;
	Animal(std::string name) : name(name) {}
public:
	void Move();

protected:
	std::string name;
};

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

class Dog : public Animal
{
public:
	void Move();
};

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

class Bird : public Animal
{
public:
	void Move();
};

#endif // ! _ANIMAL

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include <string>

#include "Animal.h"

void Animal::Move()
{
	std::cout << name << " 움직인다" << std::endl;
}

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

void Dog::Move()
{
	std::cout << name << " 달린다" << std::endl;
}

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

void Bird::Move()
{
	std::cout << name << " 난다" << std::endl;
}


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

━━━━━━━━━━━━━━━━━━━━
저장시간: 11/22/21 18:53:16 Monday
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━
// 11월 22일 월요일 (12주 2일)
// 
// 1. 객체간의 관계 : 상속(inheritance)
//	1. 코드를 재사용한다.(STRING)
//	2. 다형성을 구현한다.
// 
// 함수의 정체(멤버 함수 포함)
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>

#include "save.h"
#include "Dog.h"

// [문제] 

int main()
{
	Dog a{ "코코" };
	Bird b{ "삐약" };

	Animal x = a;
	x.Move();

	Save(std::vector<std::string>{ "main.cpp", "Animal.h", "Animal.cpp" }, "11월 22일(월).txt");
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#ifndef _ANIMAL
#define _ANIMAL

class Animal
{
public:
	Animal() = default;
	Animal(std::string name) : name(name) {}
public:
	void Move();

protected:
	std::string name;
};

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

class Dog : public Animal
{
public:
	Dog() = default;
	Dog(std::string name) : Animal(name) {}
public:
	void Move();
};

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

class Bird : public Animal
{
public:
	Bird() = default;
	Bird(std::string name) : Animal(name) {}
public:
	void Move();
};

#endif // ! _ANIMAL

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include <string>

#include "Animal.h"

void Animal::Move()
{
	std::cout << name << " 움직인다" << std::endl;
}

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

void Dog::Move()
{
	std::cout << name << " 달린다" << std::endl;
}

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

void Bird::Move()
{
	std::cout << name << " 난다" << std::endl;
}


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

━━━━━━━━━━━━━━━━━━━━
저장시간: 11/22/21 19:04:13 Monday
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━
// 11월 22일 월요일 (12주 2일)
// 
// 1. 객체간의 관계 : 상속(inheritance)
//	1. 코드를 재사용한다.(STRING)
//	2. 다형성을 구현한다.
// 
// 함수의 정체(멤버 함수 포함)
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>

#include "save.h"
#include "Dog.h"

// [문제] 

int main()
{
	Dog a{ "코코" };
	Bird b{ "삐약" };

	Animal* animals[2];

	animals[0] = (Animal*)(Dog*)&a;
	animals[1] = &b;

	for (int i = 0; i < 2; ++i)
	{
		animals[i]->Move();
	}

	Save(std::vector<std::string>{ "main.cpp", "Animal.h", "Animal.cpp" }, "11월 22일(월).txt");
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#ifndef _ANIMAL
#define _ANIMAL

class Animal
{
public:
	Animal() = default;
	Animal(std::string name) : name(name) {}
public:
	virtual void Move();

protected:
	std::string name;
};

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

class Dog : public Animal
{
public:
	Dog() = default;
	Dog(std::string name) : Animal(name) {}
public:
	void Move();
};

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

class Bird : public Animal
{
public:
	Bird() = default;
	Bird(std::string name) : Animal(name) {}
public:
	void Move();
};

#endif // ! _ANIMAL

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include <string>

#include "Animal.h"

void Animal::Move()
{
	std::cout << name << " 움직인다" << std::endl;
}

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

void Dog::Move()
{
	std::cout << name << " 달린다" << std::endl;
}

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

void Bird::Move()
{
	std::cout << name << " 난다" << std::endl;
}


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

━━━━━━━━━━━━━━━━━━━━
저장시간: 11/24/21 17:40:41 Wednesday
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━
// 11월 24일 수요일 (13주 1일)
// 
// 1. 객체간의 관계 : 상속(inheritance)
//	1. 코드를 재사용한다.(STRING)
//	2. 다형성을 구현한다.
// 
// 함수의 정체(멤버 함수 포함)
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>

#include "save.h"
#include "Dog.h"

// 가상함수(virtual function)의 비용

int main()
{
	Dog a{ "코코" };

	// 가상함수가 없을 때 Dog의 크기 = 32
	std::cout << sizeof(a) << std::endl;

	Save(std::vector<std::string>{ "main.cpp", "Animal.h", "Animal.cpp" }, "11월 24일(수).txt");
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#ifndef _ANIMAL
#define _ANIMAL

class Animal
{
public:
	Animal() = default;
	Animal(std::string name) : name(name) {}
public:
	void Move();

protected:
	std::string name;
};

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

class Dog : public Animal
{
public:
	Dog() = default;
	Dog(std::string name) : Animal(name) {}
public:
	void Move();
};

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

class Bird : public Animal
{
public:
	Bird() = default;
	Bird(std::string name) : Animal(name) {}
public:
	void Move();
};

#endif // ! _ANIMAL

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include <string>

#include "Animal.h"

void Animal::Move()
{
	std::cout << name << " 움직인다" << std::endl;
}

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

void Dog::Move()
{
	std::cout << name << " 달린다" << std::endl;
}

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

void Bird::Move()
{
	std::cout << name << " 난다" << std::endl;
}


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

━━━━━━━━━━━━━━━━━━━━
저장시간: 11/24/21 17:40:56 Wednesday
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━
// 11월 24일 수요일 (13주 1일)
// 
// 1. 객체간의 관계 : 상속(inheritance)
//	1. 코드를 재사용한다.(STRING)
//	2. 다형성을 구현한다.
// 
// 함수의 정체(멤버 함수 포함)
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>

#include "save.h"
#include "Dog.h"

// 가상함수(virtual function)의 비용

int main()
{
	Dog a{ "코코" };

	// 가상함수가 있을 때 Dog의 크기 = 40
	std::cout << sizeof(a) << std::endl;

	Save(std::vector<std::string>{ "main.cpp", "Animal.h", "Animal.cpp" }, "11월 24일(수).txt");
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#ifndef _ANIMAL
#define _ANIMAL

class Animal
{
public:
	Animal() = default;
	Animal(std::string name) : name(name) {}
public:
	virtual void Move();

protected:
	std::string name;
};

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

class Dog : public Animal
{
public:
	Dog() = default;
	Dog(std::string name) : Animal(name) {}
public:
	void Move();
};

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

class Bird : public Animal
{
public:
	Bird() = default;
	Bird(std::string name) : Animal(name) {}
public:
	void Move();
};

#endif // ! _ANIMAL

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include <string>

#include "Animal.h"

void Animal::Move()
{
	std::cout << name << " 움직인다" << std::endl;
}

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

void Dog::Move()
{
	std::cout << name << " 달린다" << std::endl;
}

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

void Bird::Move()
{
	std::cout << name << " 난다" << std::endl;
}


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

━━━━━━━━━━━━━━━━━━━━
저장시간: 11/24/21 18:42:26 Wednesday
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━
// 11월 24일 수요일 (13주 1일)
// 
// 1. 객체간의 관계 : 상속(inheritance)
//	1. 코드를 재사용한다.(STRING)
//	2. 다형성을 구현한다.
// 
// 함수의 정체(멤버 함수 포함)
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include <random>

#include "save.h"
#include "Dog.h"

// 가상함수(virtual function)의 비용

// [문제] 동물 호텔을 운영하고 있다.
// 손님은 Dog/Bird이다.
// 프로그램 사용자에게 몇 마리를 맡기고 싶은지 묻는다.
// 난수를 생성하여 홀수이면 Dog를, 짝수이면 Bird를 생성한다.
// 모든 동물들의 move()를 호출하여 다형성의 의미를 살펴본다.

std::default_random_engine dre(std::random_device{}());
std::uniform_int_distribution<int> uid(0, 1);

int main()
{
	int num;

	std::cout << "몇 마리인가? ";
	std::cin >> num;

	Animal** animals{ new Animal*[num] };

	for (int i = 0; i < num; ++i)
	{
		if (uid(dre))
		{
			animals[i] = new Dog(std::to_string(i + 1) + "번 개");

			continue;
		}

		animals[i] = new Bird(std::to_string(i + 1) + "번 새");
	}

	for (int i = 0; i < num; ++i)
	{
		animals[i]->Move();
	}

	delete[] animals;

	Save(std::vector<std::string>{ "main.cpp", "Animal.h", "Animal.cpp" }, "11월 24일(수).txt");
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#ifndef _ANIMAL
#define _ANIMAL

class Animal
{
public:
	Animal() = default;
	Animal(std::string name) : name(name) {}
public:
	virtual void Move();

protected:
	std::string name;
};

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

class Dog : public Animal
{
public:
	Dog() = default;
	Dog(std::string name) : Animal(name) {}
public:
	virtual void Move();
};

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

class Bird : public Animal
{
public:
	Bird() = default;
	Bird(std::string name) : Animal(name) {}
public:
	virtual void Move();
};

#endif // ! _ANIMAL

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include <string>

#include "Animal.h"

void Animal::Move()
{
	std::cout << name << " 움직인다" << std::endl;
}

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

void Dog::Move()
{
	std::cout << name << " 달린다" << std::endl;
}

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

void Bird::Move()
{
	std::cout << name << " 난다" << std::endl;
}


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

━━━━━━━━━━━━━━━━━━━━
저장시간: 11/24/21 18:51:25 Wednesday
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━
// 11월 24일 수요일 (13주 1일)
// 
// 1. 객체간의 관계 : 상속(inheritance)
//	1. 코드를 재사용한다.(STRING)
//	2. 다형성을 구현한다.
// 
// 함수의 정체(멤버 함수 포함)
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include <random>

#include "save.h"
#include "Dog.h"

// 가상함수(virtual function)의 비용

// [문제] 동물 호텔을 운영하고 있다.
// 손님은 Dog/Bird이다.
// 프로그램 사용자에게 몇 마리를 맡기고 싶은지 묻는다.
// 난수를 생성하여 홀수이면 Dog를, 짝수이면 Bird를 생성한다.
// 모든 동물들의 move()를 호출하여 다형성의 의미를 살펴본다.

std::default_random_engine dre(std::random_device{}());
std::uniform_int_distribution<int> uid(0, 1);

int main()
{
	int num;

	std::cout << "몇 마리인가? ";
	std::cin >> num;

	Animal** animals{ new Animal*[num] };

	for (int i = 0; i < num; ++i)
	{
		if (uid(dre))
		{
			animals[i] = new Dog(std::to_string(i + 1) + "번 개");

			continue;
		}

		animals[i] = new Bird(std::to_string(i + 1) + "번 새");
	}

	for (int i = 0; i < num; ++i)
	{
		animals[i]->Move();
	}

	for (int i = 0; i < num; ++i)
	{
		delete animals[i];
	}

	delete[] animals;

	Save(std::vector<std::string>{ "main.cpp", "Animal.h", "Animal.cpp" }, "11월 24일(수).txt");
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#ifndef _ANIMAL
#define _ANIMAL

class Animal
{
public:
	Animal() = default;
	Animal(std::string name) : name(name) {}
public:
	virtual void Move();

protected:
	std::string name;
};

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

class Dog : public Animal
{
public:
	Dog() = default;
	Dog(std::string name) : Animal(name) {}
public:
	virtual void Move();
};

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

class Bird : public Animal
{
public:
	Bird() = default;
	Bird(std::string name) : Animal(name) {}
public:
	virtual void Move();
};

#endif // ! _ANIMAL

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include <string>

#include "Animal.h"

void Animal::Move()
{
	std::cout << name << " 움직인다" << std::endl;
}

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

void Dog::Move()
{
	std::cout << name << " 달린다" << std::endl;
}

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

void Bird::Move()
{
	std::cout << name << " 난다" << std::endl;
}


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

━━━━━━━━━━━━━━━━━━━━
저장시간: 11/29/21 17:51:27 Monday
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━
// 11월 29일 월요일 (13주 2일)
// 
// 1. 객체간의 관계 : 상속(inheritance)
//	1. 코드를 재사용한다.(STRING)
//	2. 다형성을 구현한다.
// 
// 함수의 정체(멤버 함수 포함)
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>

#include "save.h"
#include "Dog.h"

// 원래 Dog인 객체만 움직이게 하고 싶다.
// Animal*를 Dog*로 변환하는 downcasting이다.
// 실시간에 type 정보를 확인하는 메커니즘을 이용한다.
// RTTI = Real Time Type Identification

int main()
{
	Dog a;
	Bird b;

	Animal* p[2];
	p[0] = &a;
	p[1] = &b;

	for (int i = 0; i < 2; ++i)
	{
		if (dynamic_cast<Dog*>(p[i]))
		{
			p[i]->Move();
		}
	}

	Save(std::vector<std::string>{ "main.cpp", "Animal.h", "Animal.cpp" }, "11월 29일(월).txt");
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#ifndef _ANIMAL
#define _ANIMAL

class Animal	// 추상 클래스로 만든다 -> 순수 가상함수를 만든다
{
public:
	Animal() = default;
	Animal(std::string name) : name(name) {}
public:
	virtual void Move() const = 0;		// 순수 가상함수

protected:
	std::string name;
};

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

class Dog : public Animal
{
public:
	Dog() = default;
	Dog(std::string name) : Animal(name) {}
public:
	virtual void Move() const override final;		// final : 파생 클래스 생성(상속) 금지
};

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

class Bird : public Animal
{
public:
	Bird() = default;
	Bird(std::string name) : Animal(name) {}
public:
	virtual void Move() const override;
};

#endif // ! _ANIMAL

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include <string>

#include "Animal.h"

void Dog::Move() const
{
	std::cout << name << " 달린다" << std::endl;
}

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

void Bird::Move() const
{
	std::cout << name << " 난다" << std::endl;
}


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━


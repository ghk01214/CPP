━━━━━━━━━━━━━━━━━━━━
저장시간: 2021-11-15 오후 5:56:22 월요일
━━━━━━━━━━━━━━━━━━━━
main.cpp
//━━━━━━━━━━━━━━━━━━━━━━━━
// 11월 15일 월요일 (11주 2일)
// 
// 1. 지난 시간 복습
// 2. class Dog를 파일에 저장하고 파일에서 읽어오기
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include <fstream>
#include <vector>
#include <random>

#include "save.h"
#include "Dog.h"

// [문제] Dog 10000 객체를 생성하여 파일 "개 1만 마리.txt"에 기록한다.
// name은 랜덤한 알파벳 소문자만 사용하고 10글자로 고정한다.
// age는 [1, 10000] 사이의 랜덤한 값으로 만들자.
// 파일에서 1만 마리 정보를 읽어 필요한 내용을 코딩해 본다.

std::random_device rd;
std::default_random_engine dre(rd());
std::uniform_int_distribution<int> ucd('a', 'z');
std::uniform_int_distribution<int> uid(1, 10000);

int main()
{
	std::ofstream out("개 1만 마리.txt");

	Dog dog;

	for (int i = 0; i < 10000; ++i)
	{
		for (int j = 0; j < 10; ++j)
		{
			dog.SetName(j, ucd(dre));
		}

		dog.SetAge(uid(dre));

		out << dog << std::endl;
		std::cout << dog << std::endl;
	}

	Save(std::vector<std::string>{"main.cpp", "Dog.h", "Dog.cpp"}, "11월 15일(월).txt");
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Dog.h
#ifndef _DOG
#define _DOG

class Dog
{
public:
	Dog() { name.resize(10); }
	Dog(std::string name);
	Dog(std::string name, int age);
public:
	void SetName(int i, int alph) { name[i] = alph; }
	void SetAge(int age) { this->age = age; }
public:
	friend std::ostream& operator<<(std::ostream& os, const Dog& dog);
	friend std::istream& operator>>(std::istream& is, Dog& dog);

private:
	std::string name;
	int age;
};

#endif // !_DOG

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Dog.cpp
#include <iostream>

#include "Dog.h"

Dog::Dog(std::string name) : name(name), age(0)
{
}

Dog::Dog(std::string name, int age) : name(name), age(age)
{

}

std::ostream& operator<<(std::ostream& os, const Dog& dog)
{
	os << dog.name << " " << dog.age;

	return os;
}

std::istream& operator>>(std::istream& is, Dog& dog)
{
	is >> dog.name >> dog.age;

	return is;
}


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

━━━━━━━━━━━━━━━━━━━━
저장시간: 2021-11-15 오후 6:10:08 월요일
━━━━━━━━━━━━━━━━━━━━
main.cpp
//━━━━━━━━━━━━━━━━━━━━━━━━
// 11월 15일 월요일 (11주 2일)
// 
// 1. 지난 시간 복습
// 2. class Dog를 파일에 저장하고 파일에서 읽어오기
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include <fstream>
#include <vector>
#include <random>

#include "save.h"
#include "Dog.h"

// [문제] 파일 "개 1만마리.txt"에 Dog 객체 1만개가 기록되어 있다.
// 1. 정보를 읽어 화면에 출력하라
// 2. 이름 오름차순으로 정렬한 후 첫 원소를 출력
// 3. 나이 오름차순으로 정렬한 후 첫 원소를 출력

std::random_device rd;
std::default_random_engine dre(rd());
std::uniform_int_distribution<int> ucd('a', 'z');
std::uniform_int_distribution<int> uid(1, 10000);

int main()
{
	std::ifstream in("개 1만 마리.txt");

	Dog d;
	std::vector<Dog> dogs;

	while (in >> d)
	{
		dogs.push_back(d);
		std::cout << d << std::endl;
	}

	std::cout << std::endl;

	std::sort(dogs.begin(), dogs.end(), [](const Dog& a, const Dog& b)
		{
			return a.GetName() < b.GetName();
		});

	std::cout << "이름 정렬 : " << dogs.front() << std::endl;

	std::sort(dogs.begin(), dogs.end(), [](const Dog& a, const Dog& b)
		{
			return a.GetAge() < b.GetAge();
		});

	std::cout << "나이 정렬 : " << dogs.front() << std::endl;

	Save(std::vector<std::string>{"main.cpp", "Dog.h", "Dog.cpp"}, "11월 15일(월).txt");
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Dog.h
#ifndef _DOG
#define _DOG

class Dog
{
public:
	Dog() { name.resize(10); }
	Dog(std::string name);
	Dog(std::string name, int age);
public:
	void SetName(int i, int alph) { name[i] = alph; }
	void SetAge(int age) { this->age = age; }

	std::string GetName() const { return name; }
	int GetAge() const { return age; }
public:
	friend std::ostream& operator<<(std::ostream& os, const Dog& dog);
	friend std::istream& operator>>(std::istream& is, Dog& dog);

private:
	std::string name;
	int age;
};

#endif // !_DOG

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Dog.cpp
#include <iostream>

#include "Dog.h"

Dog::Dog(std::string name) : name(name), age(0)
{
}

Dog::Dog(std::string name, int age) : name(name), age(age)
{

}

std::ostream& operator<<(std::ostream& os, const Dog& dog)
{
	os << dog.name << " " << dog.age;

	return os;
}

std::istream& operator>>(std::istream& is, Dog& dog)
{
	is >> dog.name >> dog.age;

	return is;
}


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

━━━━━━━━━━━━━━━━━━━━
저장시간: 2021-11-15 오후 6:16:55 월요일
━━━━━━━━━━━━━━━━━━━━
main.cpp
//━━━━━━━━━━━━━━━━━━━━━━━━
// 11월 15일 월요일 (11주 2일)
// 
// 1. 지난 시간 복습
// 2. class Dog를 파일에 저장하고 파일에서 읽어오기
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include <fstream>
#include <vector>
#include <random>

#include "save.h"
#include "Dog.h"

// [문제] 파일 "개 1만마리.txt"에 Dog 객체 1만개가 기록되어 있다.
// 1. 정보를 읽어 화면에 출력하라
// 2. 이름 오름차순으로 정렬한 후 첫 원소를 출력
// 3. 나이 오름차순으로 정렬한 후 첫 원소를 출력

std::random_device rd;
std::default_random_engine dre(rd());
std::uniform_int_distribution<int> ucd('a', 'z');
std::uniform_int_distribution<int> uid(1, 10000);

int main()
{
	std::ifstream in("개 1만 마리.txt");

	Dog d;
	Dog* dogs{ new Dog[10000] };

	for (int i = 0; i < 10000; ++i)
	{
		in >> d;
		dogs[i] = d;

		std::cout << d << std::endl;
	}

	std::cout << std::endl;

	std::sort(std::begin(dogs), std::end(dogs), [](const Dog& a, const Dog& b)
		{
			return a.GetName() < b.GetName();
		});

	std::cout << "이름 정렬 : " << *dogs << std::endl;

	std::sort(std::begin(dogs), std::end(dogs), [](const Dog& a, const Dog& b)
		{
			return a.GetAge() < b.GetAge();
		});

	std::cout << "나이 정렬 : " << *dogs << std::endl;

	delete[] dogs;

	Save(std::vector<std::string>{"main.cpp", "Dog.h", "Dog.cpp"}, "11월 15일(월).txt");
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Dog.h
#ifndef _DOG
#define _DOG

class Dog
{
public:
	Dog() { name.resize(10); }
	Dog(std::string name);
	Dog(std::string name, int age);
public:
	void SetName(int i, int alph) { name[i] = alph; }
	void SetAge(int age) { this->age = age; }

	std::string GetName() const { return name; }
	int GetAge() const { return age; }
public:
	friend std::ostream& operator<<(std::ostream& os, const Dog& dog);
	friend std::istream& operator>>(std::istream& is, Dog& dog);

private:
	std::string name;
	int age;
};

#endif // !_DOG

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Dog.cpp
#include <iostream>

#include "Dog.h"

Dog::Dog(std::string name) : name(name), age(0)
{
}

Dog::Dog(std::string name, int age) : name(name), age(age)
{

}

std::ostream& operator<<(std::ostream& os, const Dog& dog)
{
	os << dog.name << " " << dog.age;

	return os;
}

std::istream& operator>>(std::istream& is, Dog& dog)
{
	is >> dog.name >> dog.age;

	return is;
}


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

━━━━━━━━━━━━━━━━━━━━
저장시간: 2021-11-15 오후 6:42:11 월요일
━━━━━━━━━━━━━━━━━━━━
main.cpp
//━━━━━━━━━━━━━━━━━━━━━━━━
// 11월 15일 월요일 (11주 2일)
// 
// 1. 지난 시간 복습
// 2. class Dog를 파일에 저장하고 파일에서 읽어오기
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include <fstream>
#include <vector>
#include <random>

#include "save.h"
#include "Dog.h"

// [문제] 파일 "개 1만마리.txt"에 Dog 객체 1만개가 기록되어 있다.
// 1. 정보를 읽어 화면에 출력하라
// 2. 이름 오름차순으로 정렬한 후 첫 원소를 출력
// 3. 나이 오름차순으로 정렬한 후 첫 원소를 출력

std::random_device rd;
std::default_random_engine dre(rd());
std::uniform_int_distribution<int> ucd('a', 'z');
std::uniform_int_distribution<int> uid(1, 10000);

int main()
{
	std::ifstream in("개 1만 마리.txt");

	Dog d;
	Dog* dogs{ new Dog[10000] };
	int i{};

	while (in >> d)
	{
		dogs[i++] = d;

		std::cout << d << std::endl;
	}

	std::cout << std::endl;

	std::sort(dogs, dogs + 10000, [](const Dog& a, const Dog& b)
		{
			return a.GetName() < b.GetName();
		});

	std::cout << "이름 정렬 : " << *dogs << std::endl;

	std::sort(dogs, dogs + 10000, [](const Dog& a, const const Dog& b)
		{
			return a.GetAge() < b.GetAge();
		});

	std::cout << "나이 정렬 : " << *dogs << std::endl;

	delete[] dogs;

	Save(std::vector<std::string>{"main.cpp", "Dog.h", "Dog.cpp"}, "11월 15일(월).txt");
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Dog.h
#ifndef _DOG
#define _DOG

class Dog
{
public:
	Dog() { name.resize(10); }
	Dog(std::string name);
	Dog(std::string name, int age);
public:
	void SetName(int i, int alph) { name[i] = alph; }
	void SetAge(int age) { this->age = age; }

	std::string GetName() const { return name; }
	int GetAge() const { return age; }
public:
	friend std::ostream& operator<<(std::ostream& os, const Dog& dog);
	friend std::istream& operator>>(std::istream& is, Dog& dog);

private:
	std::string name;
	int age;
};

#endif // !_DOG

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Dog.cpp
#include <iostream>

#include "Dog.h"

Dog::Dog(std::string name) : name(name), age(0)
{
}

Dog::Dog(std::string name, int age) : name(name), age(age)
{

}

std::ostream& operator<<(std::ostream& os, const Dog& dog)
{
	os << dog.name << " " << dog.age;

	return os;
}

std::istream& operator>>(std::istream& is, Dog& dog)
{
	is >> dog.name >> dog.age;

	return is;
}


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━


━━━━━━━━━━━━━━━━━━━━
저장시간: 2021-11-04 오후 10:10:36 목요일
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━
// 10월 27일 수요일 (9주 1일)
// 
// 표준 string과 유사한 기능을 하는 String을 만들며 class 설계에 필요한 것들을 학습
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include <string>
#include "save.h"

// [문제] 다음 main()이 문제 없이 실행되도록 class String을 코딩하라.
// main()이 수정되면 안 된다.

class String
{
public:
	String(const char* str);
	~String();
public:
	void show();
public:
	size_t size() const { return num; }
public:
	String& operator=(const String& other);
	friend std::ostream& operator<<(std::ostream& os, const String& s);

private:
	size_t num{};	// 저장한 글자 수
	char* p{};		// 글자가 있는 메모리
};

String::String(const char* str) : num(strlen(str))
{
	p = new char[num];
	memcpy(p, str, num);

	std::cout << "생성자(const char*) - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;
}

String::~String()
{
	std::cout << "소멸자 - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;

	delete[] p;
}

void String::show()
{
	for (int i = 0; i < num; ++i)
	{
		std::cout << p[i];
	}

	std::cout << std::endl;
}

String& String::operator=(const String& other)
{
	if (this == &other)
	{
		return *this;
	}

	delete[] p;
	num = other.num;
	p = new char[num];

	memcpy(p, other.p, num);

	std::cout << "할당연산자 - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;

	return *this;
}

std::ostream& operator<<(std::ostream& os, const String& s)
{
	for (int i = 0; i < s.num; ++i)
	{
		os << s.p[i];
	}

	return os;
}

int main()
{
	String s{ "안녕하세요" };

	std::cout << s << std::endl;

	Save("main.cpp", "10월 13일(수).txt");
}


━━━━━━━━━━━━━━━━━━━━
저장시간: 2021-11-04 오후 10:14:07 목요일
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━
// 10월 27일 수요일 (9주 1일)
// 
// 표준 string과 유사한 기능을 하는 String을 만들며 class 설계에 필요한 것들을 학습
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include <string>
#include "save.h"

// [문제] 다음 main()이 문제 없이 실행되도록 class String을 코딩하라.
// main()이 수정되면 안 된다.

class String
{
public:
	String() { std::cout << "디폴트 생성자() - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl; };
	String(const char* str);
	~String();
public:
	void show();
public:
	size_t size() const { return num; }
public:
	String& operator=(const String& other);
	friend std::ostream& operator<<(std::ostream& os, const String& s);

private:
	size_t num{};	// 저장한 글자 수
	char* p{};		// 글자가 있는 메모리
};

String::String(const char* str) : num(strlen(str))
{
	p = new char[num];
	memcpy(p, str, num);

	std::cout << "생성자(const char*) - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;
}

String::~String()
{
	std::cout << "소멸자 - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;

	delete[] p;
}

void String::show()
{
	for (int i = 0; i < num; ++i)
	{
		std::cout << p[i];
	}

	std::cout << std::endl;
}

String& String::operator=(const String& other)
{
	if (this == &other)
	{
		return *this;
	}

	delete[] p;
	num = other.num;
	p = new char[num];

	memcpy(p, other.p, num);

	std::cout << "할당연산자 - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;

	return *this;
}

std::ostream& operator<<(std::ostream& os, const String& s)
{
	for (int i = 0; i < s.num; ++i)
	{
		os << s.p[i];
	}

	return os;
}

int main()
{
	String s1;
	String s2{ "표준 string과 같은 동작을 하는 클래스" };

	//s1 = s2;

	std::cout << s1 << std::endl;
	std::cout << s2 << std::endl;

	Save("main.cpp", "10월 13일(수).txt");
}


━━━━━━━━━━━━━━━━━━━━
저장시간: 2021-11-04 오후 10:14:21 목요일
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━
// 10월 27일 수요일 (9주 1일)
// 
// 표준 string과 유사한 기능을 하는 String을 만들며 class 설계에 필요한 것들을 학습
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include <string>
#include "save.h"

// [문제] 다음 main()이 문제 없이 실행되도록 class String을 코딩하라.
// main()이 수정되면 안 된다.

class String
{
public:
	String() { std::cout << "디폴트 생성자() - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl; };
	String(const char* str);
	~String();
public:
	void show();
public:
	size_t size() const { return num; }
public:
	String& operator=(const String& other);
	friend std::ostream& operator<<(std::ostream& os, const String& s);

private:
	size_t num{};	// 저장한 글자 수
	char* p{};		// 글자가 있는 메모리
};

String::String(const char* str) : num(strlen(str))
{
	p = new char[num];
	memcpy(p, str, num);

	std::cout << "생성자(const char*) - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;
}

String::~String()
{
	std::cout << "소멸자 - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;

	delete[] p;
}

void String::show()
{
	for (int i = 0; i < num; ++i)
	{
		std::cout << p[i];
	}

	std::cout << std::endl;
}

String& String::operator=(const String& other)
{
	if (this == &other)
	{
		return *this;
	}

	delete[] p;
	num = other.num;
	p = new char[num];

	memcpy(p, other.p, num);

	std::cout << "할당연산자 - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;

	return *this;
}

std::ostream& operator<<(std::ostream& os, const String& s)
{
	for (int i = 0; i < s.num; ++i)
	{
		os << s.p[i];
	}

	return os;
}

int main()
{
	String s1;
	String s2{ "표준 string과 같은 동작을 하는 클래스" };

	s1 = s2;

	std::cout << s1 << std::endl;
	std::cout << s2 << std::endl;

	Save("main.cpp", "10월 13일(수).txt");
}


━━━━━━━━━━━━━━━━━━━━
저장시간: 2021-11-04 오후 10:16:34 목요일
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━
// 10월 27일 수요일 (9주 1일)
// 
// 표준 string과 유사한 기능을 하는 String을 만들며 class 설계에 필요한 것들을 학습
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include <string>
#include "save.h"

// [문제] 다음 main()이 문제 없이 실행되도록 class String을 코딩하라.
// main()이 수정되면 안 된다.

class String
{
public:
	String() { std::cout << "디폴트 생성자() - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl; };
	String(const char* str);
	~String();
public:
	void show();
public:
	size_t size() const { return num; }
public:
	String& operator=(const String& other);
	friend std::ostream& operator<<(std::ostream& os, const String& s);

private:
	size_t num{};	// 저장한 글자 수
	char* p{};		// 글자가 있는 메모리
};

String::String(const char* str) : num(strlen(str))
{
	p = new char[num];
	memcpy(p, str, num);

	std::cout << "생성자(const char*) - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;
}

String::~String()
{
	std::cout << "소멸자 - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;

	delete[] p;
}

void String::show()
{
	for (int i = 0; i < num; ++i)
	{
		std::cout << p[i];
	}

	std::cout << std::endl;
}

String& String::operator=(const String& other)
{
	if (this == &other)
	{
		return *this;
	}

	delete[] p;
	num = other.num;
	p = new char[num];

	memcpy(p, other.p, num);

	std::cout << "할당연산자 - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;

	return *this;
}

std::ostream& operator<<(std::ostream& os, const String& s)
{
	for (int i = 0; i < s.num; ++i)
	{
		os << s.p[i];
	}

	return os;
}

int main()
{
	String s1{ "표준 string과 같은 동작을 하는 클래스" };
	String s2 = s1;

	std::cout << s1 << std::endl;
	std::cout << s2 << std::endl;

	Save("main.cpp", "10월 13일(수).txt");
}


━━━━━━━━━━━━━━━━━━━━
저장시간: 2021-11-04 오후 10:20:47 목요일
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━
// 10월 27일 수요일 (9주 1일)
// 
// 표준 string과 유사한 기능을 하는 String을 만들며 class 설계에 필요한 것들을 학습
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include <string>
#include "save.h"

// [문제] 다음 main()이 문제 없이 실행되도록 class String을 코딩하라.
// main()이 수정되면 안 된다.

class String
{
public:
	String() { std::cout << "디폴트 생성자() - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl; };
	String(const char* str);
	String(const String& other);
	~String();
public:
	void show();
public:
	size_t size() const { return num; }
public:
	String& operator=(const String& other);
	friend std::ostream& operator<<(std::ostream& os, const String& s);

private:
	size_t num{};	// 저장한 글자 수
	char* p{};		// 글자가 있는 메모리
};

String::String(const char* str) : num(strlen(str))
{
	p = new char[num];
	memcpy(p, str, num);

	std::cout << "생성자(const char*) - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;
}

String::String(const String& other) : num(other.num), p(new char[num])
{
	memcpy(p, other.p, num);

	std::cout << "복사생성자(const String&) - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;
}

String::~String()
{
	std::cout << "소멸자 - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;

	delete[] p;
}

void String::show()
{
	for (int i = 0; i < num; ++i)
	{
		std::cout << p[i];
	}

	std::cout << std::endl;
}

String& String::operator=(const String& other)
{
	if (this == &other)
	{
		return *this;
	}

	delete[] p;
	num = other.num;
	p = new char[num];

	memcpy(p, other.p, num);

	std::cout << "할당연산자 - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;

	return *this;
}

std::ostream& operator<<(std::ostream& os, const String& s)
{
	for (int i = 0; i < s.num; ++i)
	{
		os << s.p[i];
	}

	return os;
}

int main()
{
	String s1{ "표준 string과 같은 동작을 하는 클래스" };
	String s2 = s1;

	std::cout << s1 << std::endl;
	std::cout << s2 << std::endl;

	Save("main.cpp", "10월 27일(수).txt");
}


━━━━━━━━━━━━━━━━━━━━
저장시간: 2021-11-04 오후 10:28:57 목요일
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━
// 10월 27일 수요일 (9주 1일)
// 
// 표준 string과 유사한 기능을 하는 String을 만들며 class 설계에 필요한 것들을 학습
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include <string>
#include "save.h"

// [문제] 다음 main()이 문제 없이 실행되도록 class String을 코딩하라.
// main()이 수정되면 안 된다.

class String
{
public:
	String() { std::cout << "디폴트 생성자() - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl; };
	String(const char* str);
	String(const String& other);
	~String();
public:
	void show();
public:
	size_t size() const { return num; }
public:
	String& operator=(const String& other);
	String operator+(const String& rhs) const;
	friend std::ostream& operator<<(std::ostream& os, const String& s);

private:
	size_t num{};	// 저장한 글자 수
	char* p{};		// 글자가 있는 메모리
};

String::String(const char* str) : num(strlen(str))
{
	p = new char[num];
	memcpy(p, str, num);

	std::cout << "생성자(const char*) - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;
}

String::String(const String& other) : num(other.num), p(new char[num])
{
	memcpy(p, other.p, num);

	std::cout << "복사생성자(const String&) - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;
}

String::~String()
{
	std::cout << "소멸자 - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;

	delete[] p;
}

void String::show()
{
	for (int i = 0; i < num; ++i)
	{
		std::cout << p[i];
	}

	std::cout << std::endl;
}

String& String::operator=(const String& other)
{
	if (this == &other)
	{
		return *this;
	}

	delete[] p;
	num = other.num;
	p = new char[num];

	memcpy(p, other.p, num);

	std::cout << "할당연산자 - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;

	return *this;
}

String String::operator+(const String& rhs) const
{
	String temp;

	temp.num = num + rhs.num;
	temp.p = new char[temp.num];

	memcpy(temp.p, p, num);
	memcpy(temp.p + num, rhs.p, rhs.num);

	return temp;
}

std::ostream& operator<<(std::ostream& os, const String& s)
{
	for (int i = 0; i < s.num; ++i)
	{
		os << s.p[i];
	}

	return os;
}

int main()
{
	String s1{ "C언어는 char*로 문자열을 다룬다" };
	String s2{ " - C++ 언어는 string을 사용한다" };

	String s3 = s1 + s2;

	std::cout << "s3의 글자 수 : " << s3.size() << std::endl;
	std::cout << s3 << std::endl;

	Save("main.cpp", "10월 27일(수).txt");
}


━━━━━━━━━━━━━━━━━━━━
저장시간: 11/04/21 22:49:37 Thursday
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━
// 11월 01일 월요일 (9주 2일)
// 
// 표준 string과 유사한 기능을 하는 String을 만들며 class 설계에 필요한 것들을 학습
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include <string>
#include "save.h"

class String
{
public:
	String() { std::cout << "디폴트 생성자() - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl; };
	String(const char* str);
	String(const String& other);
	~String();
public:
	void show();
public:
	size_t size() const { return num; }
public:
	String& operator=(const String& other);
	String operator+(const String& rhs) const;
	friend std::ostream& operator<<(std::ostream& os, const String& s);

private:
	size_t num{};	// 저장한 글자 수
	char* p{};		// 글자가 있는 메모리
};

String::String(const char* str) : num(strlen(str))
{
	p = new char[num];
	memcpy(p, str, num);

	std::cout << "생성자(const char*) - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;
}

String::String(const String& other) : num(other.num), p(new char[num])
{
	memcpy(p, other.p, num);

	std::cout << "복사생성자(const String&) - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;
}

String::~String()
{
	std::cout << "소멸자 - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;

	delete[] p;
}

void String::show()
{
	for (int i = 0; i < num; ++i)
	{
		std::cout << p[i];
	}

	std::cout << std::endl;
}

String& String::operator=(const String& other)
{
	if (this == &other)
	{
		return *this;
	}

	delete[] p;
	num = other.num;
	p = new char[num];

	memcpy(p, other.p, num);

	std::cout << "할당연산자 - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;

	return *this;
}

String String::operator+(const String& rhs) const
{
	String temp;

	temp.num = num + rhs.num;
	temp.p = new char[temp.num];

	memcpy(temp.p, p, num);
	memcpy(temp.p + num, rhs.p, rhs.num);

	return temp;
}

std::ostream& operator<<(std::ostream& os, const String& s)
{
	for (int i = 0; i < s.num; ++i)
	{
		os << s.p[i];
	}

	return os;
}

// [문제] 

// 자원을 관리하는 클래스는 자기가 관리하는 자원을 이동시킬 수도 있다.
// 이동은 복사보다 효율적인 동작이 될 수 있다.

int main()
{


	Save("main.cpp", "11월 01일(월).txt");
}


━━━━━━━━━━━━━━━━━━━━
저장시간: 11/04/21 22:51:42 Thursday
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━
// 11월 01일 월요일 (9주 2일)
// 
// 표준 string과 유사한 기능을 하는 String을 만들며 class 설계에 필요한 것들을 학습
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include <string>
#include "save.h"

class String
{
public:
	String() { std::cout << "디폴트 생성자() - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl; };
	String(const char* str);
	String(const String& other);
	~String();
public:
	void show();
public:
	size_t size() const { return num; }
public:
	String& operator=(const String& other);
	String operator+(const String& rhs) const;
	friend std::ostream& operator<<(std::ostream& os, const String& s);

private:
	size_t num{};	// 저장한 글자 수
	char* p{};		// 글자가 있는 메모리
};

String::String(const char* str) : num(strlen(str))
{
	p = new char[num];
	memcpy(p, str, num);

	std::cout << "생성자(const char*) - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;
}

String::String(const String& other) : num(other.num), p(new char[num])
{
	memcpy(p, other.p, num);

	std::cout << "복사생성자(const String&) - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;
}

String::~String()
{
	std::cout << "소멸자 - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;

	delete[] p;
}

void String::show()
{
	for (int i = 0; i < num; ++i)
	{
		std::cout << p[i];
	}

	std::cout << std::endl;
}

String& String::operator=(const String& other)
{
	if (this == &other)
	{
		return *this;
	}

	delete[] p;
	num = other.num;
	p = new char[num];

	memcpy(p, other.p, num);

	std::cout << "복사 할당연산자 - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;

	return *this;
}

String String::operator+(const String& rhs) const
{
	String temp;

	temp.num = num + rhs.num;
	temp.p = new char[temp.num];

	memcpy(temp.p, p, num);
	memcpy(temp.p + num, rhs.p, rhs.num);

	return temp;
}

std::ostream& operator<<(std::ostream& os, const String& s)
{
	for (int i = 0; i < s.num; ++i)
	{
		os << s.p[i];
	}

	return os;
}

// 자원을 관리하는 클래스는 자기가 관리하는 자원을 이동시킬 수도 있다.
// 이동은 복사보다 효율적인 동작이 될 수 있다.

int main()
{
	std::string s1{ "나는 s1이 관리하는 자원입니다" };
	std::string s2 = std::move(s1);

	std::cout << "s1 : " << s1 << std::endl;
	std::cout << "s2 : " << s2 << std::endl;

	Save("main.cpp", "11월 01일(월).txt");
}


━━━━━━━━━━━━━━━━━━━━
저장시간: 11/04/21 22:51:51 Thursday
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━
// 11월 01일 월요일 (9주 2일)
// 
// 표준 string과 유사한 기능을 하는 String을 만들며 class 설계에 필요한 것들을 학습
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include <string>
#include "save.h"

class String
{
public:
	String() { std::cout << "디폴트 생성자() - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl; };
	String(const char* str);
	String(const String& other);
	~String();
public:
	void show();
public:
	size_t size() const { return num; }
public:
	String& operator=(const String& other);
	String operator+(const String& rhs) const;
	friend std::ostream& operator<<(std::ostream& os, const String& s);

private:
	size_t num{};	// 저장한 글자 수
	char* p{};		// 글자가 있는 메모리
};

String::String(const char* str) : num(strlen(str))
{
	p = new char[num];
	memcpy(p, str, num);

	std::cout << "생성자(const char*) - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;
}

String::String(const String& other) : num(other.num), p(new char[num])
{
	memcpy(p, other.p, num);

	std::cout << "복사생성자(const String&) - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;
}

String::~String()
{
	std::cout << "소멸자 - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;

	delete[] p;
}

void String::show()
{
	for (int i = 0; i < num; ++i)
	{
		std::cout << p[i];
	}

	std::cout << std::endl;
}

String& String::operator=(const String& other)
{
	if (this == &other)
	{
		return *this;
	}

	delete[] p;
	num = other.num;
	p = new char[num];

	memcpy(p, other.p, num);

	std::cout << "복사 할당연산자 - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;

	return *this;
}

String String::operator+(const String& rhs) const
{
	String temp;

	temp.num = num + rhs.num;
	temp.p = new char[temp.num];

	memcpy(temp.p, p, num);
	memcpy(temp.p + num, rhs.p, rhs.num);

	return temp;
}

std::ostream& operator<<(std::ostream& os, const String& s)
{
	for (int i = 0; i < s.num; ++i)
	{
		os << s.p[i];
	}

	return os;
}

// 자원을 관리하는 클래스는 자기가 관리하는 자원을 이동시킬 수도 있다.
// 이동은 복사보다 효율적인 동작이 될 수 있다.

int main()
{
	String s1{ "나는 s1이 관리하는 자원입니다" };
	String s2 = std::move(s1);

	std::cout << "s1 : " << s1 << std::endl;
	std::cout << "s2 : " << s2 << std::endl;

	Save("main.cpp", "11월 01일(월).txt");
}


━━━━━━━━━━━━━━━━━━━━
저장시간: 11/04/21 23:03:11 Thursday
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━
// 11월 01일 월요일 (9주 2일)
// 
// 표준 string과 유사한 기능을 하는 String을 만들며 class 설계에 필요한 것들을 학습
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include <string>
#include "save.h"

class String
{
public:
	String() { std::cout << "디폴트 생성자() - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl; };
	String(const char* str);
	~String();
public:
	String(const String& other);				// 복사생성자
	String& operator=(const String& other);		// 복사 할당연산자

	String(String&& other);						// 이동생성자, &&는 자원이 이동됨을 의미
	String& operator=(String&& other);			// 이동 할당연산자
public:
	void show();
public:
	size_t size() const { return num; }
public:
	String operator+(const String& rhs) const;
	friend std::ostream& operator<<(std::ostream& os, const String& s);

private:
	size_t num{};	// 저장한 글자 수
	char* p{};		// 글자가 있는 메모리
};

String::String(const char* str) : num(strlen(str))
{
	p = new char[num];
	memcpy(p, str, num);

	std::cout << "생성자(const char*) - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;
}

String::~String()
{
	std::cout << "소멸자 - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;

	delete[] p;
}

String::String(const String& other) : num(other.num), p(new char[num])
{
	memcpy(p, other.p, num);

	std::cout << "복사생성자(const String&) - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;
}

String& String::operator=(const String& other)
{
	if (this == &other)
		return *this;

	delete[] p;
	num = other.num;
	p = new char[num];

	memcpy(p, other.p, num);

	std::cout << "복사 할당연산자 - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;

	return *this;
}

String::String(String&& other) : num(other.num), p(other.p)
{
	other.num = 0;
	other.p = nullptr;

	std::cout << "이동생성자(String&&) - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;
}

String& String::operator=(String&& other)
{
	if (this == &other)
		return *this;

	delete[] p;
	num = other.num;
	p = other.p;

	other.num = 0;
	other.p = nullptr;

	std::cout << "이동 할당연산자 - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;

	return *this;
}

void String::show()
{
	for (int i = 0; i < num; ++i)
	{
		std::cout << p[i];
	}

	std::cout << std::endl;
}

String String::operator+(const String& rhs) const
{
	String temp;

	temp.num = num + rhs.num;
	temp.p = new char[temp.num];

	memcpy(temp.p, p, num);
	memcpy(temp.p + num, rhs.p, rhs.num);

	return temp;
}

std::ostream& operator<<(std::ostream& os, const String& s)
{
	for (int i = 0; i < s.num; ++i)
	{
		os << s.p[i];
	}

	return os;
}

// 자원을 관리하는 클래스는 자기가 관리하는 자원을 이동시킬 수도 있다.
// 이동은 복사보다 효율적인 동작이 될 수 있다.

int main()
{
	String s1{ "나는 s1이 관리하는 자원입니다" };
	String s2 = std::move(s1);

	std::cout << "s1 : " << s1 << std::endl;
	std::cout << "s2 : " << s2 << std::endl;

	Save("main.cpp", "11월 01일(월).txt");
}


━━━━━━━━━━━━━━━━━━━━
저장시간: 11/04/21 23:13:24 Thursday
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━
// 11월 01일 월요일 (9주 2일)
// 
// 표준 string과 유사한 기능을 하는 String을 만들며 class 설계에 필요한 것들을 학습
// 
// 내가 만든 클래스가 자원을 할당 받는다면(모든 이야기는 여기에서 시작)
//	1. 생성자에서 자원을 할당 받는다.	(RAII)
//	2. 소멸자에서 자원을 반환한다.
//	3. 복사 생성자를 만들어 깊은 복사를 한다.
//	4. 복사 할당 연산자를 만들어 깊은 복사를 한다.
//	5. 이동 생성자를 만들어 복사보다 효율적인 동적이 되게 한다.
//	6. 이동 할당 연산자도 잊지말고 만들어야 한다.
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include <string>
#include <algorithm>
#include "save.h"

class String
{
public:
	String() { std::cout << "디폴트 생성자() - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl; };
	String(const char* str);
	~String();
public:
	String(const String& other);				// 복사생성자
	String& operator=(const String& other);		// 복사 할당연산자

	String(String&& other) noexcept;			// 이동생성자, &&는 자원이 이동됨을 의미
	String& operator=(String&& other) noexcept;	// 이동 할당연산자
public:
	void show();
public:
	size_t size() const { return num; }
public:
	String operator+(const String& rhs) const;
	friend std::ostream& operator<<(std::ostream& os, const String& s);

private:
	size_t num{};	// 저장한 글자 수
	char* p{};		// 글자가 있는 메모리
};

String::String(const char* str) : num(strlen(str))
{
	p = new char[num];
	memcpy(p, str, num);

	std::cout << "생성자(const char*) - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;
}

String::~String()
{
	std::cout << "소멸자 - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;

	delete[] p;
}

String::String(const String& other) : num(other.num), p(new char[num])
{
	memcpy(p, other.p, num);

	std::cout << "복사생성자(const String&) - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;
}

String& String::operator=(const String& other)
{
	if (this == &other)
		return *this;

	delete[] p;
	num = other.num;
	p = new char[num];

	memcpy(p, other.p, num);

	std::cout << "복사 할당연산자 - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;

	return *this;
}

String::String(String&& other) noexcept : num(other.num), p(other.p)
{
	other.num = 0;
	other.p = nullptr;

	std::cout << "이동생성자(String&&) - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;
}

String& String::operator=(String&& other) noexcept
{
	if (this == &other)
		return *this;

	delete[] p;
	num = other.num;
	p = other.p;

	other.num = 0;
	other.p = nullptr;

	std::cout << "이동 할당연산자 - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;

	return *this;
}

void String::show()
{
	for (int i = 0; i < num; ++i)
	{
		std::cout << p[i];
	}

	std::cout << std::endl;
}

String String::operator+(const String& rhs) const
{
	String temp;

	temp.num = num + rhs.num;
	temp.p = new char[temp.num];

	memcpy(temp.p, p, num);
	memcpy(temp.p + num, rhs.p, rhs.num);

	return temp;
}

std::ostream& operator<<(std::ostream& os, const String& s)
{
	for (int i = 0; i < s.num; ++i)
	{
		os << s.p[i];
	}

	return os;
}

// name을 길이 내림차순으로 정렬한 후 화면에 출력하라

int main()
{
	String name[5]{ "파일", "Git", "창", "도움말", "프로젝트" };

	std::sort(std::begin(name), std::end(name), [](const String& s1, const String& s2)
		{
			return s1.size() > s2.size();
		});

	for (const String& s : name)
	{
		std::cout << s << std::endl;
	}

	Save("main.cpp", "11월 01일(월).txt");
}


━━━━━━━━━━━━━━━━━━━━
저장시간: 11/04/21 23:46:45 Thursday
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━
// 11월 03일 수요일 (10주 1일)
// 
// class와 더 친해보자.
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>

#include "save.h"
#include "Dog.h"

// [문제] Dog 여러마리가 서로 경주하는 게임을 만들려고 한다.
// 1. class Dog를 코딩해보자
// 멤버변수 - 이름, 속도
// 멤버함수 - 달린다 
// main이 수정 없이 실행되도록 class Dog를 코딩하라.

int main()
{
	Dog a;
	Dog b{ "코코" };
	Dog c{ "보리", 40000 / 3600 };

	std::cout << a << std::endl;		 // 이름이 없어요, 0
	std::cout << b << std::endl;		 // 코코, 0
	std::cout << c << std::endl; 		 // 보리, 11.1

	Save("main.cpp", "11월 03일(수).txt");
}

━━━━━━━━━━━━━━━━━━━━
저장시간: 11/05/21 00:19:26 Friday
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━
// 11월 03일 수요일 (10주 1일)
// 
// class와 더 친해보자.
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include <vector>
#include <random>

#include "save.h"
#include "Dog.h"

// [문제] Dog 여러마리가 서로 경주하는 게임을 만들려고 한다.
// 1. class Dog를 코딩해보자
// 멤버변수 - 이름, 속도
// 멤버함수 - 달린다 
// class Dog 객체 10개를 만들어라
// 각 객체의 이름과 속도를 랜덤 값으로 생성하라.
// 속도는 초속 20000 ~ 50000 값으로 설정하라.
// 경주를 시작하고 1초 경과시마다 각 객체가 달린 거리를 계산하고 1km를 먼저 달리는 Dog 객체를 출력하라.

std::random_device rd;
std::default_random_engine dre(rd());
std::uniform_real_distribution<> urd(20000, 50000);

int main()
{
	Dog dogs[10];

	for (int i = 0; i < std::size(dogs); ++i)
	{
		dogs[i].SetName("Dog " + std::to_string(i) + "호");
		dogs[i].SetSpeed(urd(dre) / 3600);
	}

	for (const Dog& dog : dogs)
	{
		std::cout << dog << std::endl;
	}

	std::vector<std::string> v(3);
	v[0] = "main.cpp";
	v[1] = "Dog.h";
	v[2] = "Dog.cpp";

	Save(v, "11월 03일(수).txt");
}

#ifndef _DOG
#define _DOG

class Dog
{
public:
	Dog();
	Dog(std::string name);
	Dog(std::string name, double speed);
public:
	// 관찰을 위해 작성
	Dog(const Dog& other);
public:
	void SetName(std::string n) { name = n; }
	void SetSpeed(double s) { speed = s; }
public:
	void bark() { std::cout << "왈왈" << std::endl; }
public:
	friend std::ostream& operator<<(std::ostream& os, const Dog& d);

private:
	std::string name;
	double speed; 
};

#endif // !_DOG

#include <iostream>
#include <string>

#include "Dog.h"

Dog::Dog() : name("이름이 없어요"), speed(0)
{
	bark();
}

Dog::Dog(std::string name) : name(name)
{
	bark();
}

Dog::Dog(std::string name, double speed) : name(name), speed(speed)
{
	bark();
}

Dog::Dog(const Dog& other) : name(other.name), speed(other.speed)
{
	bark();
}

std::ostream& operator<<(std::ostream& os, const Dog& d)
{
	os << d.name << ", 속도 : " << d.speed;

	return os;
}



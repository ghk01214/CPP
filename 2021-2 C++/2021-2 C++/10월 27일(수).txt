━━━━━━━━━━━━━━━━━━━━
저장시간: 2021-11-04 오후 10:10:36 목요일
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━
// 10월 27일 수요일 (9주 1일)
// 
// 표준 string과 유사한 기능을 하는 String을 만들며 class 설계에 필요한 것들을 학습
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include <string>
#include "save.h"

// [문제] 다음 main()이 문제 없이 실행되도록 class String을 코딩하라.
// main()이 수정되면 안 된다.

class String
{
public:
	String(const char* str);
	~String();
public:
	void show();
public:
	size_t size() const { return num; }
public:
	String& operator=(const String& other);
	friend std::ostream& operator<<(std::ostream& os, const String& s);

private:
	size_t num{};	// 저장한 글자 수
	char* p{};		// 글자가 있는 메모리
};

String::String(const char* str) : num(strlen(str))
{
	p = new char[num];
	memcpy(p, str, num);

	std::cout << "생성자(const char*) - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;
}

String::~String()
{
	std::cout << "소멸자 - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;

	delete[] p;
}

void String::show()
{
	for (int i = 0; i < num; ++i)
	{
		std::cout << p[i];
	}

	std::cout << std::endl;
}

String& String::operator=(const String& other)
{
	if (this == &other)
	{
		return *this;
	}

	delete[] p;
	num = other.num;
	p = new char[num];

	memcpy(p, other.p, num);

	std::cout << "할당연산자 - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;

	return *this;
}

std::ostream& operator<<(std::ostream& os, const String& s)
{
	for (int i = 0; i < s.num; ++i)
	{
		os << s.p[i];
	}

	return os;
}

int main()
{
	String s{ "안녕하세요" };

	std::cout << s << std::endl;

	Save("main.cpp", "10월 13일(수).txt");
}


━━━━━━━━━━━━━━━━━━━━
저장시간: 2021-11-04 오후 10:14:07 목요일
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━
// 10월 27일 수요일 (9주 1일)
// 
// 표준 string과 유사한 기능을 하는 String을 만들며 class 설계에 필요한 것들을 학습
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include <string>
#include "save.h"

// [문제] 다음 main()이 문제 없이 실행되도록 class String을 코딩하라.
// main()이 수정되면 안 된다.

class String
{
public:
	String() { std::cout << "디폴트 생성자() - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl; };
	String(const char* str);
	~String();
public:
	void show();
public:
	size_t size() const { return num; }
public:
	String& operator=(const String& other);
	friend std::ostream& operator<<(std::ostream& os, const String& s);

private:
	size_t num{};	// 저장한 글자 수
	char* p{};		// 글자가 있는 메모리
};

String::String(const char* str) : num(strlen(str))
{
	p = new char[num];
	memcpy(p, str, num);

	std::cout << "생성자(const char*) - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;
}

String::~String()
{
	std::cout << "소멸자 - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;

	delete[] p;
}

void String::show()
{
	for (int i = 0; i < num; ++i)
	{
		std::cout << p[i];
	}

	std::cout << std::endl;
}

String& String::operator=(const String& other)
{
	if (this == &other)
	{
		return *this;
	}

	delete[] p;
	num = other.num;
	p = new char[num];

	memcpy(p, other.p, num);

	std::cout << "할당연산자 - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;

	return *this;
}

std::ostream& operator<<(std::ostream& os, const String& s)
{
	for (int i = 0; i < s.num; ++i)
	{
		os << s.p[i];
	}

	return os;
}

int main()
{
	String s1;
	String s2{ "표준 string과 같은 동작을 하는 클래스" };

	//s1 = s2;

	std::cout << s1 << std::endl;
	std::cout << s2 << std::endl;

	Save("main.cpp", "10월 13일(수).txt");
}


━━━━━━━━━━━━━━━━━━━━
저장시간: 2021-11-04 오후 10:14:21 목요일
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━
// 10월 27일 수요일 (9주 1일)
// 
// 표준 string과 유사한 기능을 하는 String을 만들며 class 설계에 필요한 것들을 학습
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include <string>
#include "save.h"

// [문제] 다음 main()이 문제 없이 실행되도록 class String을 코딩하라.
// main()이 수정되면 안 된다.

class String
{
public:
	String() { std::cout << "디폴트 생성자() - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl; };
	String(const char* str);
	~String();
public:
	void show();
public:
	size_t size() const { return num; }
public:
	String& operator=(const String& other);
	friend std::ostream& operator<<(std::ostream& os, const String& s);

private:
	size_t num{};	// 저장한 글자 수
	char* p{};		// 글자가 있는 메모리
};

String::String(const char* str) : num(strlen(str))
{
	p = new char[num];
	memcpy(p, str, num);

	std::cout << "생성자(const char*) - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;
}

String::~String()
{
	std::cout << "소멸자 - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;

	delete[] p;
}

void String::show()
{
	for (int i = 0; i < num; ++i)
	{
		std::cout << p[i];
	}

	std::cout << std::endl;
}

String& String::operator=(const String& other)
{
	if (this == &other)
	{
		return *this;
	}

	delete[] p;
	num = other.num;
	p = new char[num];

	memcpy(p, other.p, num);

	std::cout << "할당연산자 - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;

	return *this;
}

std::ostream& operator<<(std::ostream& os, const String& s)
{
	for (int i = 0; i < s.num; ++i)
	{
		os << s.p[i];
	}

	return os;
}

int main()
{
	String s1;
	String s2{ "표준 string과 같은 동작을 하는 클래스" };

	s1 = s2;

	std::cout << s1 << std::endl;
	std::cout << s2 << std::endl;

	Save("main.cpp", "10월 13일(수).txt");
}


━━━━━━━━━━━━━━━━━━━━
저장시간: 2021-11-04 오후 10:16:34 목요일
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━
// 10월 27일 수요일 (9주 1일)
// 
// 표준 string과 유사한 기능을 하는 String을 만들며 class 설계에 필요한 것들을 학습
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include <string>
#include "save.h"

// [문제] 다음 main()이 문제 없이 실행되도록 class String을 코딩하라.
// main()이 수정되면 안 된다.

class String
{
public:
	String() { std::cout << "디폴트 생성자() - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl; };
	String(const char* str);
	~String();
public:
	void show();
public:
	size_t size() const { return num; }
public:
	String& operator=(const String& other);
	friend std::ostream& operator<<(std::ostream& os, const String& s);

private:
	size_t num{};	// 저장한 글자 수
	char* p{};		// 글자가 있는 메모리
};

String::String(const char* str) : num(strlen(str))
{
	p = new char[num];
	memcpy(p, str, num);

	std::cout << "생성자(const char*) - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;
}

String::~String()
{
	std::cout << "소멸자 - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;

	delete[] p;
}

void String::show()
{
	for (int i = 0; i < num; ++i)
	{
		std::cout << p[i];
	}

	std::cout << std::endl;
}

String& String::operator=(const String& other)
{
	if (this == &other)
	{
		return *this;
	}

	delete[] p;
	num = other.num;
	p = new char[num];

	memcpy(p, other.p, num);

	std::cout << "할당연산자 - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;

	return *this;
}

std::ostream& operator<<(std::ostream& os, const String& s)
{
	for (int i = 0; i < s.num; ++i)
	{
		os << s.p[i];
	}

	return os;
}

int main()
{
	String s1{ "표준 string과 같은 동작을 하는 클래스" };
	String s2 = s1;

	std::cout << s1 << std::endl;
	std::cout << s2 << std::endl;

	Save("main.cpp", "10월 13일(수).txt");
}


━━━━━━━━━━━━━━━━━━━━
저장시간: 2021-11-04 오후 10:20:47 목요일
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━
// 10월 27일 수요일 (9주 1일)
// 
// 표준 string과 유사한 기능을 하는 String을 만들며 class 설계에 필요한 것들을 학습
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include <string>
#include "save.h"

// [문제] 다음 main()이 문제 없이 실행되도록 class String을 코딩하라.
// main()이 수정되면 안 된다.

class String
{
public:
	String() { std::cout << "디폴트 생성자() - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl; };
	String(const char* str);
	String(const String& other);
	~String();
public:
	void show();
public:
	size_t size() const { return num; }
public:
	String& operator=(const String& other);
	friend std::ostream& operator<<(std::ostream& os, const String& s);

private:
	size_t num{};	// 저장한 글자 수
	char* p{};		// 글자가 있는 메모리
};

String::String(const char* str) : num(strlen(str))
{
	p = new char[num];
	memcpy(p, str, num);

	std::cout << "생성자(const char*) - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;
}

String::String(const String& other) : num(other.num), p(new char[num])
{
	memcpy(p, other.p, num);

	std::cout << "복사생성자(const String&) - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;
}

String::~String()
{
	std::cout << "소멸자 - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;

	delete[] p;
}

void String::show()
{
	for (int i = 0; i < num; ++i)
	{
		std::cout << p[i];
	}

	std::cout << std::endl;
}

String& String::operator=(const String& other)
{
	if (this == &other)
	{
		return *this;
	}

	delete[] p;
	num = other.num;
	p = new char[num];

	memcpy(p, other.p, num);

	std::cout << "할당연산자 - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;

	return *this;
}

std::ostream& operator<<(std::ostream& os, const String& s)
{
	for (int i = 0; i < s.num; ++i)
	{
		os << s.p[i];
	}

	return os;
}

int main()
{
	String s1{ "표준 string과 같은 동작을 하는 클래스" };
	String s2 = s1;

	std::cout << s1 << std::endl;
	std::cout << s2 << std::endl;

	Save("main.cpp", "10월 27일(수).txt");
}


━━━━━━━━━━━━━━━━━━━━
저장시간: 2021-11-04 오후 10:28:57 목요일
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━
// 10월 27일 수요일 (9주 1일)
// 
// 표준 string과 유사한 기능을 하는 String을 만들며 class 설계에 필요한 것들을 학습
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include <string>
#include "save.h"

// [문제] 다음 main()이 문제 없이 실행되도록 class String을 코딩하라.
// main()이 수정되면 안 된다.

class String
{
public:
	String() { std::cout << "디폴트 생성자() - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl; };
	String(const char* str);
	String(const String& other);
	~String();
public:
	void show();
public:
	size_t size() const { return num; }
public:
	String& operator=(const String& other);
	String operator+(const String& rhs) const;
	friend std::ostream& operator<<(std::ostream& os, const String& s);

private:
	size_t num{};	// 저장한 글자 수
	char* p{};		// 글자가 있는 메모리
};

String::String(const char* str) : num(strlen(str))
{
	p = new char[num];
	memcpy(p, str, num);

	std::cout << "생성자(const char*) - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;
}

String::String(const String& other) : num(other.num), p(new char[num])
{
	memcpy(p, other.p, num);

	std::cout << "복사생성자(const String&) - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;
}

String::~String()
{
	std::cout << "소멸자 - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;

	delete[] p;
}

void String::show()
{
	for (int i = 0; i < num; ++i)
	{
		std::cout << p[i];
	}

	std::cout << std::endl;
}

String& String::operator=(const String& other)
{
	if (this == &other)
	{
		return *this;
	}

	delete[] p;
	num = other.num;
	p = new char[num];

	memcpy(p, other.p, num);

	std::cout << "할당연산자 - 갯수 : " << num << ", 주소 : " << static_cast<void*>(p) << std::endl;

	return *this;
}

String String::operator+(const String& rhs) const
{
	String temp;

	temp.num = num + rhs.num;
	temp.p = new char[temp.num];

	memcpy(temp.p, p, num);
	memcpy(temp.p + num, rhs.p, rhs.num);

	return temp;
}

std::ostream& operator<<(std::ostream& os, const String& s)
{
	for (int i = 0; i < s.num; ++i)
	{
		os << s.p[i];
	}

	return os;
}

int main()
{
	String s1{ "C언어는 char*로 문자열을 다룬다" };
	String s2{ " - C++ 언어는 string을 사용한다" };

	String s3 = s1 + s2;

	std::cout << "s3의 글자 수 : " << s3.size() << std::endl;
	std::cout << s3 << std::endl;

	Save("main.cpp", "10월 27일(수).txt");
}



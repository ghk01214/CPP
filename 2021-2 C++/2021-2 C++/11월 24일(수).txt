━━━━━━━━━━━━━━━━━━━━
저장시간: 2021-11-24 오후 5:40:41 수요일
━━━━━━━━━━━━━━━━━━━━
main.cpp
//━━━━━━━━━━━━━━━━━━━━━━━━
// 11월 24일 수요일 (13주 1일)
// 
// 1. 객체간의 관계 : 상속(inheritance)
//	1. 코드를 재사용한다.(STRING)
//	2. 다형성을 구현한다.
// 
// 함수의 정체(멤버 함수 포함)
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>

#include "save.h"
#include "Dog.h"

// 가상함수(virtual function)의 비용

int main()
{
	Dog a{ "코코" };

	// 가상함수가 없을 때 Dog의 크기 = 32
	std::cout << sizeof(a) << std::endl;

	Save(std::vector<std::string>{ "main.cpp", "Animal.h", "Animal.cpp" }, "11월 24일(수).txt");
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Animal.h
#ifndef _ANIMAL
#define _ANIMAL

class Animal
{
public:
	Animal() = default;
	Animal(std::string name) : name(name) {}
public:
	void Move();

protected:
	std::string name;
};

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

class Dog : public Animal
{
public:
	Dog() = default;
	Dog(std::string name) : Animal(name) {}
public:
	void Move();
};

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

class Bird : public Animal
{
public:
	Bird() = default;
	Bird(std::string name) : Animal(name) {}
public:
	void Move();
};

#endif // ! _ANIMAL

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Animal.cpp
#include <iostream>
#include <string>

#include "Animal.h"

void Animal::Move()
{
	std::cout << name << " 움직인다" << std::endl;
}

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

void Dog::Move()
{
	std::cout << name << " 달린다" << std::endl;
}

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

void Bird::Move()
{
	std::cout << name << " 난다" << std::endl;
}


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

━━━━━━━━━━━━━━━━━━━━
저장시간: 2021-11-24 오후 5:40:56 수요일
━━━━━━━━━━━━━━━━━━━━
main.cpp
//━━━━━━━━━━━━━━━━━━━━━━━━
// 11월 24일 수요일 (13주 1일)
// 
// 1. 객체간의 관계 : 상속(inheritance)
//	1. 코드를 재사용한다.(STRING)
//	2. 다형성을 구현한다.
// 
// 함수의 정체(멤버 함수 포함)
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>

#include "save.h"
#include "Dog.h"

// 가상함수(virtual function)의 비용

int main()
{
	Dog a{ "코코" };

	// 가상함수가 있을 때 Dog의 크기 = 40
	std::cout << sizeof(a) << std::endl;

	Save(std::vector<std::string>{ "main.cpp", "Animal.h", "Animal.cpp" }, "11월 24일(수).txt");
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Animal.h
#ifndef _ANIMAL
#define _ANIMAL

class Animal
{
public:
	Animal() = default;
	Animal(std::string name) : name(name) {}
public:
	virtual void Move();

protected:
	std::string name;
};

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

class Dog : public Animal
{
public:
	Dog() = default;
	Dog(std::string name) : Animal(name) {}
public:
	void Move();
};

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

class Bird : public Animal
{
public:
	Bird() = default;
	Bird(std::string name) : Animal(name) {}
public:
	void Move();
};

#endif // ! _ANIMAL

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Animal.cpp
#include <iostream>
#include <string>

#include "Animal.h"

void Animal::Move()
{
	std::cout << name << " 움직인다" << std::endl;
}

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

void Dog::Move()
{
	std::cout << name << " 달린다" << std::endl;
}

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

void Bird::Move()
{
	std::cout << name << " 난다" << std::endl;
}


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

━━━━━━━━━━━━━━━━━━━━
저장시간: 2021-11-24 오후 6:42:26 수요일
━━━━━━━━━━━━━━━━━━━━
main.cpp
//━━━━━━━━━━━━━━━━━━━━━━━━
// 11월 24일 수요일 (13주 1일)
// 
// 1. 객체간의 관계 : 상속(inheritance)
//	1. 코드를 재사용한다.(STRING)
//	2. 다형성을 구현한다.
// 
// 함수의 정체(멤버 함수 포함)
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include <random>

#include "save.h"
#include "Dog.h"

// 가상함수(virtual function)의 비용

// [문제] 동물 호텔을 운영하고 있다.
// 손님은 Dog/Bird이다.
// 프로그램 사용자에게 몇 마리를 맡기고 싶은지 묻는다.
// 난수를 생성하여 홀수이면 Dog를, 짝수이면 Bird를 생성한다.
// 모든 동물들의 move()를 호출하여 다형성의 의미를 살펴본다.

std::default_random_engine dre(std::random_device{}());
std::uniform_int_distribution<int> uid(0, 1);

int main()
{
	int num;

	std::cout << "몇 마리인가? ";
	std::cin >> num;

	Animal** animals{ new Animal*[num] };

	for (int i = 0; i < num; ++i)
	{
		if (uid(dre))
		{
			animals[i] = new Dog(std::to_string(i + 1) + "번 개");

			continue;
		}

		animals[i] = new Bird(std::to_string(i + 1) + "번 새");
	}

	for (int i = 0; i < num; ++i)
	{
		animals[i]->Move();
	}

	delete[] animals;

	Save(std::vector<std::string>{ "main.cpp", "Animal.h", "Animal.cpp" }, "11월 24일(수).txt");
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Animal.h
#ifndef _ANIMAL
#define _ANIMAL

class Animal
{
public:
	Animal() = default;
	Animal(std::string name) : name(name) {}
public:
	virtual void Move();

protected:
	std::string name;
};

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

class Dog : public Animal
{
public:
	Dog() = default;
	Dog(std::string name) : Animal(name) {}
public:
	virtual void Move();
};

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

class Bird : public Animal
{
public:
	Bird() = default;
	Bird(std::string name) : Animal(name) {}
public:
	virtual void Move();
};

#endif // ! _ANIMAL

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Animal.cpp
#include <iostream>
#include <string>

#include "Animal.h"

void Animal::Move()
{
	std::cout << name << " 움직인다" << std::endl;
}

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

void Dog::Move()
{
	std::cout << name << " 달린다" << std::endl;
}

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

void Bird::Move()
{
	std::cout << name << " 난다" << std::endl;
}


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

━━━━━━━━━━━━━━━━━━━━
저장시간: 2021-11-24 오후 6:51:25 수요일
━━━━━━━━━━━━━━━━━━━━
main.cpp
//━━━━━━━━━━━━━━━━━━━━━━━━
// 11월 24일 수요일 (13주 1일)
// 
// 1. 객체간의 관계 : 상속(inheritance)
//	1. 코드를 재사용한다.(STRING)
//	2. 다형성을 구현한다.
// 
// 함수의 정체(멤버 함수 포함)
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include <random>

#include "save.h"
#include "Dog.h"

// 가상함수(virtual function)의 비용

// [문제] 동물 호텔을 운영하고 있다.
// 손님은 Dog/Bird이다.
// 프로그램 사용자에게 몇 마리를 맡기고 싶은지 묻는다.
// 난수를 생성하여 홀수이면 Dog를, 짝수이면 Bird를 생성한다.
// 모든 동물들의 move()를 호출하여 다형성의 의미를 살펴본다.

std::default_random_engine dre(std::random_device{}());
std::uniform_int_distribution<int> uid(0, 1);

int main()
{
	int num;

	std::cout << "몇 마리인가? ";
	std::cin >> num;

	Animal** animals{ new Animal*[num] };

	for (int i = 0; i < num; ++i)
	{
		if (uid(dre))
		{
			animals[i] = new Dog(std::to_string(i + 1) + "번 개");

			continue;
		}

		animals[i] = new Bird(std::to_string(i + 1) + "번 새");
	}

	for (int i = 0; i < num; ++i)
	{
		animals[i]->Move();
	}

	for (int i = 0; i < num; ++i)
	{
		delete animals[i];
	}

	delete[] animals;

	Save(std::vector<std::string>{ "main.cpp", "Animal.h", "Animal.cpp" }, "11월 24일(수).txt");
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Animal.h
#ifndef _ANIMAL
#define _ANIMAL

class Animal
{
public:
	Animal() = default;
	Animal(std::string name) : name(name) {}
public:
	virtual void Move();

protected:
	std::string name;
};

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

class Dog : public Animal
{
public:
	Dog() = default;
	Dog(std::string name) : Animal(name) {}
public:
	virtual void Move();
};

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

class Bird : public Animal
{
public:
	Bird() = default;
	Bird(std::string name) : Animal(name) {}
public:
	virtual void Move();
};

#endif // ! _ANIMAL

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Animal.cpp
#include <iostream>
#include <string>

#include "Animal.h"

void Animal::Move()
{
	std::cout << name << " 움직인다" << std::endl;
}

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

void Dog::Move()
{
	std::cout << name << " 달린다" << std::endl;
}

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

void Bird::Move()
{
	std::cout << name << " 난다" << std::endl;
}


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━


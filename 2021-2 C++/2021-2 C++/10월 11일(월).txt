━━━━━━━━━━━━━━━━━━━━
저장시간: 2021-10-20 오후 2:42:53 수요일
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━
// 10월 11일 월요일 (6주 2일)
// 
// class/struct - 사용자 정의 자료형(객체를 찍어 내는 틀)
// - struct와 class 차이
// 
// special 동작
// - 객체가 생성되었다
// - 객체가 소멸되었다
// - 객체가 복사되었다
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include "save.h"

// [문제] 

struct Point2D
{
	int x{};
	int y{};

	// constructor 생성자
	Point2D()
	{
		std::cout << "디폴트 생성 : ";
		show();
	}
	
	Point2D(int x, int y) : x(x), y(y)
	{
		std::cout << "인자로 생성 : ";
		show();
	}

	// destructor 소멸자 - 메모리가 소멸하는 것이 아니다.
	// 메모리가 해제되기 직전에 호출되는 함수이다.
	~Point2D()
	{
		std::cout << "소멸자 - ";
		show();
	}

	// copy constructor 복사생성자
	Point2D(const Point2D& other)
	{
		std::cout << "복사생성자 : ";
		show();
	}

	void show()
	{
		std::cout << "(" << x << ", " << y << ")" << std::endl;
	}
};

int main()
{
	Point2D a;
	Point2D b{ a };	// b 객체가 a를 복사하여 생성

	Save("main.cpp", "9월 27일(월).txt");
}

━━━━━━━━━━━━━━━━━━━━
저장시간: 2021-10-20 오후 2:43:46 수요일
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━
// 10월 11일 월요일 (6주 2일)
// 
// class/struct - 사용자 정의 자료형(객체를 찍어 내는 틀)
// - struct와 class 차이
// 
// special 동작
// - 객체가 생성되었다
// - 객체가 소멸되었다
// - 객체가 복사되었다
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include "save.h"

// [문제] 

struct Point2D
{
	int x{};
	int y{};

	// constructor 생성자
	Point2D()
	{
		std::cout << "디폴트 생성 : ";
		show();
	}
	
	Point2D(int x, int y) : x(x), y(y)
	{
		std::cout << "인자로 생성 : ";
		show();
	}

	// destructor 소멸자 - 메모리가 소멸하는 것이 아니다.
	// 메모리가 해제되기 직전에 호출되는 함수이다.
	~Point2D()
	{
		std::cout << "소멸자 - ";
		show();
	}

	// copy constructor 복사생성자
	Point2D(const Point2D& other)
	{
		std::cout << "복사생성자 : ";
		show();
	}

	void show()
	{
		std::cout << "(" << x << ", " << y << ")" << std::endl;
	}
};

int main()
{
	Point2D a{ 10, 20 };
	Point2D b{ a };	// b 객체가 a를 복사하여 생성

	Save("main.cpp", "9월 27일(월).txt");
}

━━━━━━━━━━━━━━━━━━━━
저장시간: 2021-10-20 오후 2:44:15 수요일
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━
// 10월 11일 월요일 (6주 2일)
// 
// class/struct - 사용자 정의 자료형(객체를 찍어 내는 틀)
// - struct와 class 차이
// 
// special 동작
// - 객체가 생성되었다
// - 객체가 소멸되었다
// - 객체가 복사되었다
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include "save.h"

// [문제] 

struct Point2D
{
	int x{};
	int y{};

	// constructor 생성자
	Point2D()
	{
		std::cout << "디폴트 생성 : ";
		show();
	}
	
	Point2D(int x, int y) : x(x), y(y)
	{
		std::cout << "인자로 생성 : ";
		show();
	}

	// destructor 소멸자 - 메모리가 소멸하는 것이 아니다.
	// 메모리가 해제되기 직전에 호출되는 함수이다.
	~Point2D()
	{
		std::cout << "소멸자 - ";
		show();
	}

	// copy constructor 복사생성자
	Point2D(const Point2D& other) : x(other.x), y(other.y)
	{
		std::cout << "복사생성자 : ";
		show();
	}

	void show()
	{
		std::cout << "(" << x << ", " << y << ")" << std::endl;
	}
};

int main()
{
	Point2D a{ 10, 20 };
	Point2D b{ a };	// b 객체가 a를 복사하여 생성

	Save("main.cpp", "9월 27일(월).txt");
}

━━━━━━━━━━━━━━━━━━━━
저장시간: 2021-10-20 오후 2:52:09 수요일
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━
// 10월 11일 월요일 (6주 2일)
// 
// class/struct - 사용자 정의 자료형(객체를 찍어 내는 틀)
// - struct와 class 차이
// 
// special 동작
// - 객체가 생성되었다
// - 객체가 소멸되었다
// - 객체가 복사되었다
// - 객체가 할당되었다
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include "save.h"

// [문제] 

struct Point2D
{
	int x{};
	int y{};

	// constructor 생성자
	Point2D()
	{
		std::cout << "디폴트 생성 : ";
		show();
	}
	
	Point2D(int x, int y) : x(x), y(y)
	{
		std::cout << "인자로 생성 : ";
		show();
	}

	// destructor 소멸자 - 메모리가 소멸하는 것이 아니다.
	// 메모리가 해제되기 직전에 호출되는 함수이다.
	~Point2D()
	{
		std::cout << "소멸자 - ";
		show();
	}

	// copy constructor 복사생성자
	Point2D(const Point2D& other) : x(other.x), y(other.y)
	{
		std::cout << "복사생성자 : ";
		show();
	}

	// assginment operator 할당연산자
	// c = a
	Point2D& operator=(const Point2D& other)
	{
		x = other.x;
		y = other.y;

		std::cout << "할당연산자 : ";
		show();

		return *this;
	}

	void show()
	{
		std::cout << "(" << x << ", " << y << ")" << std::endl;
	}
};

int main()
{
	Point2D a{ 10, 20 };
	Point2D b{ a };	// b 객체가 a를 복사하여 생성
	Point2D c;

	c = a;		// 이 순간은 c의 메모리를 a의 메모리와 같은 내용으로 채워라는 명령
				// 이 때 할당연산자가 호출된다.

	c.show();

	Save("main.cpp", "10월 11일(월).txt");
}

━━━━━━━━━━━━━━━━━━━━
저장시간: 2021-10-20 오후 2:55:37 수요일
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━
// 10월 11일 월요일 (6주 2일)
// 
// class/struct - 사용자 정의 자료형(객체를 찍어 내는 틀)
// - struct와 class 차이
// 
// special 동작
// - 객체가 생성되었다
// - 객체가 소멸되었다
// - 객체가 복사되었다
// - 객체가 할당되었다
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include "save.h"

// [문제] 

struct Point2D
{
	int x{};
	int y{};

	// constructor 생성자
	Point2D()
	{
		std::cout << "디폴트 생성 : ";
		show();
	}
	
	Point2D(int x, int y) : x(x), y(y)
	{
		std::cout << "인자로 생성 : ";
		show();
	}

	// destructor 소멸자 - 메모리가 소멸하는 것이 아니다.
	// 메모리가 해제되기 직전에 호출되는 함수이다.
	~Point2D()
	{
		std::cout << "소멸자 - ";
		show();
	}

	// copy constructor 복사생성자
	Point2D(const Point2D& other) : x(other.x), y(other.y)
	{
		std::cout << "복사생성자 : ";
		show();
	}

	// assginment operator 할당연산자
	// c = a
	Point2D& operator=(const Point2D& other)
	{
		// 자신을 자신에게 할당하는 일은 없게 하자.
		if (this == &other)
			return *this;

		x = other.x;
		y = other.y;

		std::cout << "할당연산자 : ";
		show();

		return *this;
	}

	void show()
	{
		std::cout << "(" << x << ", " << y << ")" << std::endl;
	}
};

int main()
{
	Point2D a{ 10, 20 };
	Point2D b{ a };	// b 객체가 a를 복사하여 생성
	Point2D c;

	c = a;		// 이 순간은 c의 메모리를 a의 메모리와 같은 내용으로 채워라는 명령
				// 이 때 할당연산자가 호출된다.

	c.show();

	Save("main.cpp", "10월 11일(월).txt");
}

━━━━━━━━━━━━━━━━━━━━
저장시간: 2021-10-20 오후 3:01:23 수요일
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━
// 10월 11일 월요일 (6주 2일)
// 
// class/struct - 사용자 정의 자료형(객체를 찍어 내는 틀)
// - struct와 class 차이
//	 struct는 멤버변수를 감추지 않는다
//	 class는 멤버변수를 감추어 class 바깥에서 멤버변수에 접근하지 못 한다.
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include "save.h"

// [문제] 

class Point2D
{
private:		// access specifier or access modifier : 접근지정자
	int x;
	int y;
public:
	void show()
	{
		std::cout << x << ", " << y << std::endl;
	}
};

int main()
{


	Save("main.cpp", "10월 11일(월).txt");
}

━━━━━━━━━━━━━━━━━━━━
저장시간: 2021-10-20 오후 3:02:22 수요일
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━
// 10월 11일 월요일 (6주 2일)
// 
// class/struct - 사용자 정의 자료형(객체를 찍어 내는 틀)
// - struct와 class 차이
//	 struct는 default public member
//	 class는 default private member
//	 class - 정보은닉(information hiding) 캡슐화
//━━━━━━━━━━━━━━━━━━━━━━━━

#include <iostream>
#include "save.h"

// [문제] 

class Point2D
{
private:		// access specifier or access modifier : 접근지정자
	int x;
	int y;
public:
	void show()
	{
		std::cout << x << ", " << y << std::endl;
	}
};

int main()
{


	Save("main.cpp", "10월 11일(월).txt");
}

